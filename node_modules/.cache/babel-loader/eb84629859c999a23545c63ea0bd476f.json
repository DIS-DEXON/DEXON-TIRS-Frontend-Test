{"ast":null,"code":"/**\r\n * DevExtreme (esm/exporter/exceljs/export_merged_ranges_manager.js)\r\n * Version: 21.2.7\r\n * Build date: Mon Apr 11 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\n\nclass MergedRangesManager {\n  constructor(dataProvider, helpers, mergeRowFieldValues, mergeColumnFieldValues) {\n    this.mergedCells = [];\n    this.mergedRanges = [];\n    this.dataProvider = dataProvider;\n    this.helpers = helpers;\n    this.mergeRowFieldValues = mergeRowFieldValues;\n    this.mergeColumnFieldValues = mergeColumnFieldValues;\n  }\n\n  updateMergedRanges(excelCell, rowIndex, cellIndex) {\n    if (this.helpers._isHeaderCell(this.dataProvider, rowIndex, cellIndex)) {\n      if (!this.isCellInMergedRanges(rowIndex, cellIndex)) {\n        var {\n          rowspan: rowspan,\n          colspan: colspan\n        } = this.dataProvider.getCellMerging(rowIndex, cellIndex);\n        var isMasterCellOfMergedRange = colspan || rowspan;\n\n        if (isMasterCellOfMergedRange) {\n          var allowToMergeRange = this.helpers._allowToMergeRange(this.dataProvider, rowIndex, cellIndex, rowspan, colspan, this.mergeRowFieldValues, this.mergeColumnFieldValues);\n\n          this.updateMergedCells(excelCell, rowIndex, cellIndex, rowspan, colspan, allowToMergeRange);\n\n          if (allowToMergeRange) {\n            this.mergedRanges.push(_extends({\n              masterCell: excelCell\n            }, {\n              rowspan: rowspan,\n              colspan: colspan\n            }));\n          }\n        }\n      }\n    }\n  }\n\n  isCellInMergedRanges(rowIndex, cellIndex) {\n    return this.mergedCells[rowIndex] && this.mergedCells[rowIndex][cellIndex];\n  }\n\n  findMergedCellInfo(rowIndex, cellIndex) {\n    if (this.helpers._isHeaderCell(this.dataProvider, rowIndex, cellIndex)) {\n      if (this.isCellInMergedRanges(rowIndex, cellIndex)) {\n        return this.mergedCells[rowIndex][cellIndex];\n      }\n    }\n  }\n\n  updateMergedCells(excelCell, rowIndex, cellIndex, rowspan, colspan, allowToMergeRange) {\n    for (var i = rowIndex; i <= rowIndex + rowspan; i++) {\n      for (var j = cellIndex; j <= cellIndex + colspan; j++) {\n        if (!this.mergedCells[i]) {\n          this.mergedCells[i] = [];\n        }\n\n        this.mergedCells[i][j] = {\n          masterCell: excelCell,\n          unmerged: !allowToMergeRange\n        };\n      }\n    }\n  }\n\n  applyMergedRages(worksheet) {\n    this.mergedRanges.forEach(range => {\n      var startRowIndex = range.masterCell.fullAddress.row;\n      var startColumnIndex = range.masterCell.fullAddress.col;\n      var endRowIndex = startRowIndex + range.rowspan;\n      var endColumnIndex = startColumnIndex + range.colspan;\n      worksheet.mergeCells(startRowIndex, startColumnIndex, endRowIndex, endColumnIndex);\n    });\n  }\n\n}\n\nexport { MergedRangesManager };","map":{"version":3,"sources":["/Users/dexon/Projects/AI-Portal-Frontend/node_modules/devextreme/esm/exporter/exceljs/export_merged_ranges_manager.js"],"names":["_extends","MergedRangesManager","constructor","dataProvider","helpers","mergeRowFieldValues","mergeColumnFieldValues","mergedCells","mergedRanges","updateMergedRanges","excelCell","rowIndex","cellIndex","_isHeaderCell","isCellInMergedRanges","rowspan","colspan","getCellMerging","isMasterCellOfMergedRange","allowToMergeRange","_allowToMergeRange","updateMergedCells","push","masterCell","findMergedCellInfo","i","j","unmerged","applyMergedRages","worksheet","forEach","range","startRowIndex","fullAddress","row","startColumnIndex","col","endRowIndex","endColumnIndex","mergeCells"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/exporter/exceljs/export_merged_ranges_manager.js)\r\n * Version: 21.2.7\r\n * Build date: Mon Apr 11 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nclass MergedRangesManager {\r\n    constructor(dataProvider, helpers, mergeRowFieldValues, mergeColumnFieldValues) {\r\n        this.mergedCells = [];\r\n        this.mergedRanges = [];\r\n        this.dataProvider = dataProvider;\r\n        this.helpers = helpers;\r\n        this.mergeRowFieldValues = mergeRowFieldValues;\r\n        this.mergeColumnFieldValues = mergeColumnFieldValues\r\n    }\r\n    updateMergedRanges(excelCell, rowIndex, cellIndex) {\r\n        if (this.helpers._isHeaderCell(this.dataProvider, rowIndex, cellIndex)) {\r\n            if (!this.isCellInMergedRanges(rowIndex, cellIndex)) {\r\n                var {\r\n                    rowspan: rowspan,\r\n                    colspan: colspan\r\n                } = this.dataProvider.getCellMerging(rowIndex, cellIndex);\r\n                var isMasterCellOfMergedRange = colspan || rowspan;\r\n                if (isMasterCellOfMergedRange) {\r\n                    var allowToMergeRange = this.helpers._allowToMergeRange(this.dataProvider, rowIndex, cellIndex, rowspan, colspan, this.mergeRowFieldValues, this.mergeColumnFieldValues);\r\n                    this.updateMergedCells(excelCell, rowIndex, cellIndex, rowspan, colspan, allowToMergeRange);\r\n                    if (allowToMergeRange) {\r\n                        this.mergedRanges.push(_extends({\r\n                            masterCell: excelCell\r\n                        }, {\r\n                            rowspan: rowspan,\r\n                            colspan: colspan\r\n                        }))\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    isCellInMergedRanges(rowIndex, cellIndex) {\r\n        return this.mergedCells[rowIndex] && this.mergedCells[rowIndex][cellIndex]\r\n    }\r\n    findMergedCellInfo(rowIndex, cellIndex) {\r\n        if (this.helpers._isHeaderCell(this.dataProvider, rowIndex, cellIndex)) {\r\n            if (this.isCellInMergedRanges(rowIndex, cellIndex)) {\r\n                return this.mergedCells[rowIndex][cellIndex]\r\n            }\r\n        }\r\n    }\r\n    updateMergedCells(excelCell, rowIndex, cellIndex, rowspan, colspan, allowToMergeRange) {\r\n        for (var i = rowIndex; i <= rowIndex + rowspan; i++) {\r\n            for (var j = cellIndex; j <= cellIndex + colspan; j++) {\r\n                if (!this.mergedCells[i]) {\r\n                    this.mergedCells[i] = []\r\n                }\r\n                this.mergedCells[i][j] = {\r\n                    masterCell: excelCell,\r\n                    unmerged: !allowToMergeRange\r\n                }\r\n            }\r\n        }\r\n    }\r\n    applyMergedRages(worksheet) {\r\n        this.mergedRanges.forEach(range => {\r\n            var startRowIndex = range.masterCell.fullAddress.row;\r\n            var startColumnIndex = range.masterCell.fullAddress.col;\r\n            var endRowIndex = startRowIndex + range.rowspan;\r\n            var endColumnIndex = startColumnIndex + range.colspan;\r\n            worksheet.mergeCells(startRowIndex, startColumnIndex, endRowIndex, endColumnIndex)\r\n        })\r\n    }\r\n}\r\nexport {\r\n    MergedRangesManager\r\n};\r\n"]},"metadata":{},"sourceType":"module"}