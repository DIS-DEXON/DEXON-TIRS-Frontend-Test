{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport axios from \"/axios.js\";\nimport DxSelectBox from \"devextreme-vue/select-box\";\nimport DxDateBox from \"devextreme-vue/date-box\";\nimport { DxLookup, DxDropDownOptions } from \"devextreme-vue/lookup\";\nexport default {\n  name: \"popup-add-project\",\n  components: {\n    DxSelectBox: DxSelectBox,\n    DxDateBox: DxDateBox,\n    DxLookup: DxLookup,\n    DxDropDownOptions: DxDropDownOptions\n  },\n  data: function data() {\n    return {\n      formData: {},\n      formSelect: {\n        jobType: [],\n        serviceType: [],\n        now: new Date(),\n        clientList: [{}]\n      }\n    };\n  },\n  created: function created() {\n    this.FETCH_DROPDOWN();\n  },\n  methods: {\n    SAVE: function SAVE() {\n      var _this = this;\n\n      if (this.formData.project_name) {\n        if (this.formData.project_no) {\n          if (isNaN(this.formData.project_no) == false) {\n            if (this.formData.id_client) {\n              this.$ons.notification.confirm(\"Confirm save?\").then(function (res) {\n                if (res == 1) {\n                  var data = _this.formData;\n                  axios({\n                    method: \"post\",\n                    url: \"/project-manager/project-add\",\n                    headers: {\n                      Authorization: \"Bearer \" + JSON.parse(localStorage.getItem(\"token\"))\n                    },\n                    data: data\n                  }).then(function (res) {\n                    console.log(res.data[0]);\n\n                    if (res.status == 200) {\n                      _this.$ons.notification.alert(\"Project Add successful\");\n\n                      _this.$emit(\"close-popup\");\n\n                      var id = res.data[0].id_project;\n\n                      if (id) {\n                        _this.$router.push(\"/projectmanager/projects/\" + id);\n                      }\n                    }\n                  }).catch(function (error) {\n                    _this.$ons.notification.alert(error.code + \" \" + error.response.status + \" \" + error.message);\n                  }).finally(function () {});\n                }\n              });\n            } else {\n              this.$ons.notification.alert('\"Client\" field cannot be empty');\n            }\n          } else {\n            this.$ons.notification.alert('\"Project No\" must be a number.');\n          }\n        } else {\n          this.$ons.notification.alert('\"Project No\" field cannot be empty.');\n        }\n      } else {\n        this.$ons.notification.alert('\"Project Name\" field cannot be empty');\n      }\n    },\n    CANCEL: function CANCEL() {\n      var _this2 = this;\n\n      if (this.formData != this.formData) {\n        this.$ons.notification.confirm(\"Your unsaved changes will be lost\").then(function (res) {\n          if (res == 1) {\n            _this2.$emit(\"closePopup\");\n          }\n        });\n      } else {\n        this.$emit(\"closePopup\");\n      }\n    },\n    FETCH_DROPDOWN: function FETCH_DROPDOWN() {\n      var _this3 = this;\n\n      axios({\n        method: \"get\",\n        url: \"/project-manager/client-list\",\n        headers: {\n          Authorization: \"Bearer \" + JSON.parse(localStorage.getItem(\"token\"))\n        }\n      }).then(function (res) {\n        if (res.data) {\n          _this3.formSelect.clientList = res.data;\n        }\n      });\n      axios({\n        method: \"get\",\n        url: \"/service-type/service-type-list\",\n        headers: {\n          Authorization: \"Bearer \" + JSON.parse(localStorage.getItem(\"token\"))\n        }\n      }).then(function (res) {\n        if (res.data) {\n          _this3.formSelect.serviceTypeList = res.data;\n        }\n      });\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkKA;AACA;AACA;AACA;AACA;AACAA,2BADA;AAEAC;AACAC,4BADA;AAEAC,wBAFA;AAGAC,sBAHA;AAIAC;AAJA,GAFA;AAQAC,MARA,kBAQA;AACA;AACAC,kBADA;AAEAC;AACAC,mBADA;AAEAC,uBAFA;AAGAC,uBAHA;AAIAC;AAJA;AAFA;AASA,GAlBA;AAmBAC,SAnBA,qBAmBA;AACA;AACA,GArBA;AAsBAC;AACAC,QADA,kBACA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAC;AACAC,kCADA;AAEAC,uDAFA;AAGAC;AACAC,qCACA;AAFA,qBAHA;AAOAd;AAPA,qBASAe,IATA,CASA;AACAC;;AACA;AACA;;AACA;;AACA;;AACA;AACA;AACA;AACA;AACA,mBAnBA,EAoBAC,KApBA,CAoBA;AACA,kDACAC,aACA,GADA,GAEAA,qBAFA,GAGA,GAHA,GAIAA,aALA;AAOA,mBA5BA,EA6BAC,OA7BA,CA6BA,cA7BA;AA8BA;AACA,eAnCA;AAoCA,aArCA,MAqCA;AACA;AACA;AACA,WAzCA,MAyCA;AACA;AACA;AACA,SA7CA,MA6CA;AACA;AACA;AACA,OAjDA,MAiDA;AACA;AACA;AACA,KAtDA;AAuDAC,UAvDA,oBAuDA;AAAA;;AACA;AACA,+BACAC,OADA,CACA,mCADA,EAEAN,IAFA,CAEA;AACA;AACA;AACA;AACA,SANA;AAOA,OARA,MAQA;AACA;AACA;AACA,KAnEA;AAoEAO,kBApEA,4BAoEA;AAAA;;AACAZ;AACAC,qBADA;AAEAC,2CAFA;AAGAC;AACAC;AADA;AAHA,SAMAC,IANA,CAMA;AACA;AACA;AACA;AACA,OAVA;AAWAL;AACAC,qBADA;AAEAC,8CAFA;AAGAC;AACAC;AADA;AAHA,SAMAC,IANA,CAMA;AACA;AACA;AACA;AACA,OAVA;AAWA;AA3FA;AAtBA","names":["name","components","DxSelectBox","DxDateBox","DxLookup","DxDropDownOptions","data","formData","formSelect","jobType","serviceType","now","clientList","created","methods","SAVE","axios","method","url","headers","Authorization","then","console","catch","error","finally","CANCEL","confirm","FETCH_DROPDOWN"],"sourceRoot":"src/views/Applications/ProjectManager/Projects","sources":["project-add.vue"],"sourcesContent":["<template>\n  <div class=\"popup-wrapper\">\n    <div class=\"popup-card\">\n      <div class=\"popup-header\">\n        <label>Add New Project Info</label>\n      </div>\n      <div class=\"popup-content form\">\n        <div class=\"form-item-container\">\n          <label class=\"section-text\" style=\"grid-column: span 2\"\n            >Project Informations</label\n          >\n\n          <div class=\"input-set\">\n            <div class=\"label-box\">\n              <p class=\"label\">Project Name:</p>\n              <label class=\"star-label\"><i class=\"las la-asterisk\"></i></label>\n            </div>\n            <input\n              type=\"text\"\n              v-model=\"formData.project_name\"\n              placeholder=\"Project Name\"\n            />\n          </div>\n          <div class=\"input-set\">\n            <div class=\"label-box\">\n              <p class=\"label\">Project No:</p>\n              <label class=\"star-label\"><i class=\"las la-asterisk\"></i></label>\n            </div>\n            <input\n              type=\"text\"\n              v-model=\"formData.project_no\"\n              placeholder=\"Project Number\"\n            />\n          </div>\n\n          <div class=\"input-set\">\n            <p class=\"label\">Purchase Order No:</p>\n            <input\n              type=\"text\"\n              v-model=\"formData.po_no\"\n              placeholder=\"Purchase Order No\"\n            />\n          </div>\n          <div class=\"input-set\">\n            <p class=\"label\">Quotation No:</p>\n            <input\n              type=\"text\"\n              v-model=\"formData.quotation_no\"\n              placeholder=\"Quotation No\"\n            />\n          </div>\n\n          <div class=\"input-set\">\n            <p class=\"label\">Job Start Date:</p>\n            <DxDateBox\n              :value=\"formSelect.now\"\n              type=\"date\"\n              v-model=\"formData.job_start_date\"\n              placeholder=\"Job Start Date\"\n            />\n          </div>\n          <div class=\"input-set\">\n            <p class=\"label\">Job End Date:</p>\n            <DxDateBox\n              :value=\"formSelect.now\"\n              type=\"date\"\n              v-model=\"formData.job_end_date\"\n              placeholder=\"Job End Date\"\n            />\n          </div>\n          <div class=\"input-set\">\n            <p class=\"label\">Job Type:</p>\n            <input\n              type=\"text\"\n              v-model=\"formData.job_type\"\n              placeholder=\"Ex: H-N-D-RBI\"\n            />\n          </div>\n          <div class=\"input-set\">\n            <div class=\"label-box\">\n              <p class=\"label\">Service Type:</p>\n              <!-- <label class=\"star-label\"><i class=\"las la-asterisk\"></i></label> -->\n            </div>\n            <DxSelectBox\n              style=\"border: 0; font-size: 14px\"\n              v-model=\"formData.id_service_type\"\n              :data-source=\"formSelect.serviceTypeList\"\n              display-expr=\"service_type_desc\"\n              value-expr=\"id_service_type\"\n            />\n          </div>\n          <hr style=\"grid-column: span 2\" />\n          <label class=\"section-text\" style=\"grid-column: span 2\"\n            >Client Informations</label\n          >\n\n          <div class=\"input-set\">\n            <div class=\"label-box\">\n              <p class=\"label\">Client:</p>\n              <label class=\"star-label\"><i class=\"las la-asterisk\"></i></label>\n            </div>\n            <!-- <DxSelectBox\n              style=\"border: 0; font-size: 14px\"\n              :items=\"formSelect.clientList\"\n              placeholder=\"Select Client\"\n              v-model=\"formData.id_client\"\n              display-expr=\"client_name\"\n              value-expr=\"id_client\"\n              item-template=\"item\"\n            /> -->\n            <DxLookup\n              :items=\"formSelect.clientList\"\n              v-model=\"formData.id_client\"\n              formSelect.clientList\n              value=\"Select Client\"\n              value-expr=\"id_client\"\n              display-expr=\"client_name\"\n            >\n              <DxDropDownOptions :show-title=\"false\" />\n            </DxLookup>\n          </div>\n          <div class=\"input-set\">\n            <p class=\"label\">Contact Name:</p>\n            <input\n              type=\"text\"\n              v-model=\"formData.client_contact_name\"\n              placeholder=\"Contact Name\"\n            />\n          </div>\n          <div class=\"input-set\">\n            <p class=\"label\">Phone No:</p>\n            <input\n              type=\"text\"\n              v-model=\"formData.client_contact_phone_no\"\n              placeholder=\"Contact Phone No\"\n            />\n          </div>\n          <div class=\"input-set\">\n            <p class=\"label\">Email:</p>\n            <input\n              type=\"text\"\n              v-model=\"formData.client_contact_email\"\n              placeholder=\"Contact Email\"\n            />\n          </div>\n        </div>\n      </div>\n      <div class=\"popup-footer\">\n        <div class=\"button-set\">\n          <button class=\"blue\" v-on:click=\"SAVE()\">\n            <label>Save</label>\n          </button>\n          <button class=\"grey\" v-on:click=\"CANCEL()\">\n            <label>Cancel</label>\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from \"/axios.js\";\nimport DxSelectBox from \"devextreme-vue/select-box\";\nimport DxDateBox from \"devextreme-vue/date-box\";\nimport { DxLookup, DxDropDownOptions } from \"devextreme-vue/lookup\";\nexport default {\n  name: \"popup-add-project\",\n  components: {\n    DxSelectBox,\n    DxDateBox,\n    DxLookup,\n    DxDropDownOptions,\n  },\n  data() {\n    return {\n      formData: {},\n      formSelect: {\n        jobType: [],\n        serviceType: [],\n        now: new Date(),\n        clientList: [{}],\n      },\n    };\n  },\n  created() {\n    this.FETCH_DROPDOWN();\n  },\n  methods: {\n    SAVE() {\n      if (this.formData.project_name) {\n        if (this.formData.project_no) {\n          if (isNaN(this.formData.project_no) == false) {\n            if (this.formData.id_client) {\n              this.$ons.notification.confirm(\"Confirm save?\").then((res) => {\n                if (res == 1) {\n                  const data = this.formData;\n\n                  axios({\n                    method: \"post\",\n                    url: \"/project-manager/project-add\",\n                    headers: {\n                      Authorization:\n                        \"Bearer \" + JSON.parse(localStorage.getItem(\"token\")),\n                    },\n                    data: data,\n                  })\n                    .then((res) => {\n                      console.log(res.data[0]);\n                      if (res.status == 200) {\n                        this.$ons.notification.alert(\"Project Add successful\");\n                        this.$emit(\"close-popup\");\n                        const id = res.data[0].id_project;\n                        if (id) {\n                          this.$router.push(\"/projectmanager/projects/\" + id);\n                        }\n                      }\n                    })\n                    .catch((error) => {\n                      this.$ons.notification.alert(\n                        error.code +\n                          \" \" +\n                          error.response.status +\n                          \" \" +\n                          error.message\n                      );\n                    })\n                    .finally(() => {});\n                }\n              });\n            } else {\n              this.$ons.notification.alert('\"Client\" field cannot be empty');\n            }\n          } else {\n            this.$ons.notification.alert('\"Project No\" must be a number.');\n          }\n        } else {\n          this.$ons.notification.alert('\"Project No\" field cannot be empty.');\n        }\n      } else {\n        this.$ons.notification.alert('\"Project Name\" field cannot be empty');\n      }\n    },\n    CANCEL() {\n      if (this.formData != this.formData) {\n        this.$ons.notification\n          .confirm(\"Your unsaved changes will be lost\")\n          .then((res) => {\n            if (res == 1) {\n              this.$emit(\"closePopup\");\n            }\n          });\n      } else {\n        this.$emit(\"closePopup\");\n      }\n    },\n    FETCH_DROPDOWN() {\n      axios({\n        method: \"get\",\n        url: \"/project-manager/client-list\",\n        headers: {\n          Authorization: \"Bearer \" + JSON.parse(localStorage.getItem(\"token\")),\n        },\n      }).then((res) => {\n        if (res.data) {\n          this.formSelect.clientList = res.data;\n        }\n      });\n      axios({\n        method: \"get\",\n        url: \"/service-type/service-type-list\",\n        headers: {\n          Authorization: \"Bearer \" + JSON.parse(localStorage.getItem(\"token\")),\n        },\n      }).then((res) => {\n        if (res.data) {\n          this.formSelect.serviceTypeList = res.data;\n        }\n      });\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import \"@/style/main.scss\";\n// .popup-content {\n//   // width: 100%;\n// }\n.form-item-container {\n  width: auto;\n  display: grid;\n  grid-template-columns: repeat(2, 300px);\n  grid-gap: 10px;\n}\n\n.dx-icon {\n  font-size: 24px;\n  color: blue;\n}\n\nhr {\n  grid-column: span 4 / auto;\n  margin-top: 10px;\n}\n\n.form .label-box {\n  margin: 0 !important;\n}\n\n.form .form-item-container .section-text {\n  margin-top: 0px !important;\n}\n</style>"]},"metadata":{},"sourceType":"module"}