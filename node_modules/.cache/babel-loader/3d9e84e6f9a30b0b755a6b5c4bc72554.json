{"ast":null,"code":"import \"core-js/modules/es.number.to-fixed.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.to-string.js\";\n//\n//\n//\n//\n//\n//\n//\nimport moment from \"moment\";\nimport axios from \"/axios.js\";\nexport default {\n  name: \"chart-forecast-sales-bymonth-line\",\n  created: function created() {\n    this.FETCH_DATA();\n  },\n  data: function data() {\n    return {\n      chartData: {\n        idb: [],\n        rbi: [],\n        ffs: [],\n        itp: []\n      },\n      chartOptions: {\n        chart: {\n          type: \"spline\"\n        },\n        credits: {\n          enabled: false\n        },\n        title: {\n          text: \"THE MONTHLY SUMMARY OF FORECAST REVENUE BY SERVICE TYPE IN 2023\"\n        },\n        // subtitle: {\n        //   text: \"Dexon Technology Public Company Limited\",\n        // },\n        yAxis: {\n          title: {\n            text: \"ACTUAL REVENUE [MB]\"\n          },\n          labels: {\n            formatter: function formatter() {\n              return this.value / 1000000 + \"M\";\n            },\n            style: {\n              fontSize: \"14\"\n            }\n          }\n        },\n        xAxis: {\n          title: {// text: \"Months\",\n          },\n          labels: {\n            style: {\n              fontSize: \"14\"\n            }\n          },\n          categories: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n        },\n        legend: {\n          layout: \"horizontal\",\n          align: \"center\",\n          verticalAlign: \"bottom\"\n        },\n        plotOptions: {\n          series: {\n            label: {\n              connectorAllowed: false\n            }\n          },\n          spline: {\n            dataLabels: {\n              enabled: true,\n              formatter: function formatter() {\n                return (this.point.y / 1000000).toFixed(2) + \"MB\";\n              }\n            }\n          }\n        },\n        series: [{\n          name: \"IDB\",\n          data: [],\n          color: \"#3a0ca3\",\n          dataLabels: {\n            enabled: true,\n            formatter: function formatter() {\n              if (this.point.y == 0) return \"\";else if (this.point.y < 10000) return (this.point.y / 1000000).toFixed(3) + \"MB\";else return (this.point.y / 1000000).toFixed(2) + \"MB\";\n            }\n          },\n          marker: {\n            symbol: \"circle\"\n          }\n        }, {\n          name: \"RBI\",\n          data: [],\n          color: \"#7209b7\",\n          dataLabels: {\n            formatter: function formatter() {\n              if (this.point.y == 0) return \"\";else if (this.point.y < 10000) return (this.point.y / 1000000).toFixed(3) + \"MB\";else return (this.point.y / 1000000).toFixed(2) + \"MB\";\n            }\n          },\n          marker: {\n            symbol: \"circle\"\n          }\n        }, {\n          name: \"FFS\",\n          data: [],\n          color: \"#4cc9f0\",\n          dataLabels: {\n            enabled: true,\n            formatter: function formatter() {\n              if (this.point.y == 0) return \"\";else if (this.point.y < 10000) return (this.point.y / 1000000).toFixed(3) + \"MB\";else return (this.point.y / 1000000).toFixed(2) + \"MB\";\n            }\n          },\n          marker: {\n            symbol: \"circle\"\n          }\n        }, {\n          name: \"ITP\",\n          data: [],\n          color: \"#4361ee\",\n          dataLabels: {\n            enabled: true,\n            formatter: function formatter() {\n              if (this.point.y == 0) return \"\";else if (this.point.y < 10000) return (this.point.y / 1000000).toFixed(3) + \"MB\";else return (this.point.y / 1000000).toFixed(2) + \"MB\";\n            }\n          },\n          marker: {\n            symbol: \"circle\"\n          } // dataLabels: {\n          //   enabled: true,\n          //   rotation: -90,\n          //   color: '#FFFFFF',\n          //   align: 'right',\n          //   y: 10, // 10 pixels down from the top\n          //   style: {\n          //       fontSize: '10px',\n          //   },\n          //   formatter: function () {\n          //     return (this.point.y/1000000).toFixed(2);\n          //   }\n          // }\n\n        }],\n        tooltip: {\n          formatter: function formatter() {\n            return \"The <b>\" + this.series.name + \" </b>value for month <b>\" + this.x + \"</b> is <b>\" + (this.y / 1000000).toFixed(2) + \"MB\";\n          }\n        },\n        responsive: {\n          rules: [{\n            condition: {\n              maxWidth: 500\n            },\n            chartOptions: {\n              legend: {\n                layout: \"horizontal\",\n                align: \"center\",\n                verticalAlign: \"bottom\"\n              }\n            }\n          }]\n        }\n      }\n    };\n  },\n  methods: {\n    FETCH_DATA: function FETCH_DATA() {\n      var _this = this;\n\n      axios({\n        method: \"post\",\n        url: \"forecast-sales/forecast-sales-group-month-sumbyyear\",\n        headers: {\n          Authorization: \"Bearer \" + JSON.parse(localStorage.getItem(\"token\"))\n        },\n        data: {\n          year_no: moment().year() + 1\n        }\n      }).then(function (res) {\n        // console.log(res);\n        if (res.data) {\n          var json_idb = res.data;\n\n          for (var i = 0; i < json_idb.length; i++) {\n            if (json_idb[i].service_type == 1) _this.chartData.idb.push(json_idb[i].y);\n            if (json_idb[i].service_type == 2) _this.chartData.rbi.push(json_idb[i].y);\n            if (json_idb[i].service_type == 3) _this.chartData.ffs.push(json_idb[i].y);\n            if (json_idb[i].service_type == 4) _this.chartData.itp.push(json_idb[i].y);\n          }\n\n          if (_this.chartData.idb.length > 0) _this.chartOptions.series[0].data = _this.chartData.idb;\n          if (_this.chartData.rbi.length > 0) _this.chartOptions.series[1].data = _this.chartData.rbi;\n          if (_this.chartData.ffs.length > 0) _this.chartOptions.series[2].data = _this.chartData.ffs;\n          if (_this.chartData.itp.length > 0) _this.chartOptions.series[3].data = _this.chartData.itp;\n        }\n      }).catch(function (error) {\n        _this.$ons.notification.alert(error.code + \" \" + error.response.status + \" \" + error.message);\n      }).finally(function () {});\n    }\n  },\n  computed: {}\n};","map":{"version":3,"mappings":";;;;;;;;;;AAQA;AACA;AAEA;AACAA,2CADA;AAEAC,SAFA,qBAEA;AACA;AACA,GAJA;AAKAC,MALA,kBAKA;AACA;AACAC;AACAC,eADA;AAEAC,eAFA;AAGAC,eAHA;AAIAC;AAJA,OADA;AAOAC;AACAC;AACAC;AADA,SADA;AAIAC;AACAC;AADA,SAJA;AAOAC;AACAC;AADA,SAPA;AAUA;AACA;AACA;AACAC;AACAF;AACAC;AADA,WADA;AAIAE;AACAC;AACA;AACA,aAHA;AAIAC;AACAC;AADA;AAJA;AAJA,SAbA;AA0BAC;AACAP,kBACA;AADA,WADA;AAIAG;AACAE;AACAC;AADA;AADA,WAJA;AASAE,uBACA,KADA,EAEA,KAFA,EAGA,KAHA,EAIA,KAJA,EAKA,KALA,EAMA,KANA,EAOA,KAPA,EAQA,KARA,EASA,KATA,EAUA,KAVA,EAWA,KAXA,EAYA,KAZA;AATA,SA1BA;AAkDAC;AACAC,8BADA;AAEAC,yBAFA;AAGAC;AAHA,SAlDA;AAuDAC;AACAC;AACAC;AACAC;AADA;AADA,WADA;AAMAC;AACAC;AACAnB,2BADA;AAEAK;AACA;AACA;AAJA;AADA;AANA,SAvDA;AAsEAU,iBACA;AACA3B,qBADA;AAEAE,kBAFA;AAGA8B,0BAHA;AAIAD;AACAnB,yBADA;AAEAK;AACA,oDACA,0BACA,kDADA,KAEA;AACA;AAPA,WAJA;AAaAgB;AACAC;AADA;AAbA,SADA,EAkBA;AACAlC,qBADA;AAEAE,kBAFA;AAGA8B,0BAHA;AAIAD;AACAd;AACA,oDACA,0BACA,kDADA,KAEA;AACA;AANA,WAJA;AAYAgB;AACAC;AADA;AAZA,SAlBA,EAkCA;AACAlC,qBADA;AAEAE,kBAFA;AAGA8B,0BAHA;AAIAD;AACAnB,yBADA;AAEAK;AACA,oDACA,0BACA,kDADA,KAEA;AACA;AAPA,WAJA;AAaAgB;AACAC;AADA;AAbA,SAlCA,EAmDA;AACAlC,qBADA;AAEAE,kBAFA;AAGA8B,0BAHA;AAIAD;AACAnB,yBADA;AAEAK;AACA,oDACA,0BACA,kDADA,KAEA;AACA;AAPA,WAJA;AAaAgB;AACAC;AADA,WAbA,CAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA5BA,SAnDA,CAtEA;AAwJAC;AACAlB;AACA,mBACA,YACA,gBADA,GAEA,0BAFA,GAGA,MAHA,GAIA,aAJA,GAKA,6BALA,GAMA,IAPA;AASA;AAXA,SAxJA;AAqKAmB;AACAC,kBACA;AACAC;AACAC;AADA,aADA;AAIA/B;AACAc;AACAC,oCADA;AAEAC,+BAFA;AAGAC;AAHA;AADA;AAJA,WADA;AADA;AArKA;AAPA;AA8LA,GApMA;AAqMAe;AACAC,cADA,wBACA;AAAA;;AACAC;AACAC,sBADA;AAEAC,kEAFA;AAGAC;AACAC;AADA,SAHA;AAMA5C;AACA6C;AADA;AANA,SAUAC,IAVA,CAUA;AACA;AACA;AACA;;AAEA;AACA,+CACA;AACA,+CACA;AACA,+CACA;AACA,+CACA;AACA;;AAEA,8CACA;AACA,8CACA;AACA,8CACA;AACA,8CACA;AACA;AACA,OAnCA,EAoCAC,KApCA,CAoCA;AACA,sCACAC,8DADA;AAGA,OAxCA,EAyCAC,OAzCA,CAyCA,cAzCA;AA0CA;AA5CA,GArMA;AAmPAC;AAnPA","names":["name","created","data","chartData","idb","rbi","ffs","itp","chartOptions","chart","type","credits","enabled","title","text","yAxis","labels","formatter","style","fontSize","xAxis","categories","legend","layout","align","verticalAlign","plotOptions","series","label","connectorAllowed","spline","dataLabels","color","marker","symbol","tooltip","responsive","rules","condition","maxWidth","methods","FETCH_DATA","axios","method","url","headers","Authorization","year_no","then","catch","error","finally","computed"],"sourceRoot":"src/views/Applications/ExecutiveManagement/Charts","sources":["forecast-sales-bymonth-line.vue"],"sourcesContent":["<template>\n  <div class=\"chart-item\">\n    <highcharts :options=\"chartOptions\" v-if=\"this.chartData\"></highcharts>\n    <div class=\"\" v-if=\"!this.chartData\">no data</div>\n  </div>\n</template>\n\n<script>\nimport moment from \"moment\";\nimport axios from \"/axios.js\";\n\nexport default {\n  name: \"chart-forecast-sales-bymonth-line\",\n  created() {\n    this.FETCH_DATA();\n  },\n  data() {\n    return {\n      chartData: {\n        idb: [],\n        rbi: [],\n        ffs: [],\n        itp: [],\n      },\n      chartOptions: {\n        chart: {\n          type: \"spline\",\n        },\n        credits: {\n          enabled: false,\n        },\n        title: {\n          text: \"THE MONTHLY SUMMARY OF FORECAST REVENUE BY SERVICE TYPE IN 2023\",\n        },\n        // subtitle: {\n        //   text: \"Dexon Technology Public Company Limited\",\n        // },\n        yAxis: {\n          title: {\n            text: \"ACTUAL REVENUE [MB]\",\n          },\n          labels: {\n            formatter: function () {\n              return this.value / 1000000 + \"M\";\n            },\n            style: {\n              fontSize: \"14\",\n            },\n          },\n        },\n        xAxis: {\n          title: {\n            // text: \"Months\",\n          },\n          labels: {\n            style: {\n              fontSize: \"14\",\n            },\n          },\n          categories: [\n            \"Jan\",\n            \"Feb\",\n            \"Mar\",\n            \"Apr\",\n            \"May\",\n            \"Jun\",\n            \"Jul\",\n            \"Aug\",\n            \"Sep\",\n            \"Oct\",\n            \"Nov\",\n            \"Dec\",\n          ],\n        },\n        legend: {\n          layout: \"horizontal\",\n          align: \"center\",\n          verticalAlign: \"bottom\",\n        },\n        plotOptions: {\n          series: {\n            label: {\n              connectorAllowed: false,\n            },\n          },\n          spline: {\n            dataLabels: {\n              enabled: true,\n              formatter: function () {\n                return (this.point.y / 1000000).toFixed(2) + \"MB\";\n              },\n            },\n          },\n        },\n        series: [\n          {\n            name: \"IDB\",\n            data: [],\n            color: \"#3a0ca3\",\n            dataLabels: {\n              enabled: true,\n              formatter: function () {\n                if (this.point.y == 0) return \"\";\n                else if (this.point.y < 10000)\n                  return (this.point.y / 1000000).toFixed(3) + \"MB\";\n                else return (this.point.y / 1000000).toFixed(2) + \"MB\";\n              },\n            },\n            marker: {\n              symbol: \"circle\",\n            },\n          },\n          {\n            name: \"RBI\",\n            data: [],\n            color: \"#7209b7\",\n            dataLabels: {\n              formatter: function () {\n                if (this.point.y == 0) return \"\";\n                else if (this.point.y < 10000)\n                  return (this.point.y / 1000000).toFixed(3) + \"MB\";\n                else return (this.point.y / 1000000).toFixed(2) + \"MB\";\n              },\n            },\n            marker: {\n              symbol: \"circle\",\n            },\n          },\n          {\n            name: \"FFS\",\n            data: [],\n            color: \"#4cc9f0\",\n            dataLabels: {\n              enabled: true,\n              formatter: function () {\n                if (this.point.y == 0) return \"\";\n                else if (this.point.y < 10000)\n                  return (this.point.y / 1000000).toFixed(3) + \"MB\";\n                else return (this.point.y / 1000000).toFixed(2) + \"MB\";\n              },\n            },\n            marker: {\n              symbol: \"circle\",\n            },\n          },\n          {\n            name: \"ITP\",\n            data: [],\n            color: \"#4361ee\",\n            dataLabels: {\n              enabled: true,\n              formatter: function () {\n                if (this.point.y == 0) return \"\";\n                else if (this.point.y < 10000)\n                  return (this.point.y / 1000000).toFixed(3) + \"MB\";\n                else return (this.point.y / 1000000).toFixed(2) + \"MB\";\n              },\n            },\n            marker: {\n              symbol: \"circle\",\n            },\n            // dataLabels: {\n            //   enabled: true,\n            //   rotation: -90,\n            //   color: '#FFFFFF',\n            //   align: 'right',\n            //   y: 10, // 10 pixels down from the top\n            //   style: {\n            //       fontSize: '10px',\n            //   },\n            //   formatter: function () {\n            //     return (this.point.y/1000000).toFixed(2);\n            //   }\n            // }\n          },\n        ],\n        tooltip: {\n          formatter: function () {\n            return (\n              \"The <b>\" +\n              this.series.name +\n              \" </b>value for month <b>\" +\n              this.x +\n              \"</b> is <b>\" +\n              (this.y / 1000000).toFixed(2) +\n              \"MB\"\n            );\n          },\n        },\n        responsive: {\n          rules: [\n            {\n              condition: {\n                maxWidth: 500,\n              },\n              chartOptions: {\n                legend: {\n                  layout: \"horizontal\",\n                  align: \"center\",\n                  verticalAlign: \"bottom\",\n                },\n              },\n            },\n          ],\n        },\n      },\n    };\n  },\n  methods: {\n    FETCH_DATA() {\n      axios({\n        method: \"post\",\n        url: \"forecast-sales/forecast-sales-group-month-sumbyyear\",\n        headers: {\n          Authorization: \"Bearer \" + JSON.parse(localStorage.getItem(\"token\")),\n        },\n        data: {\n          year_no: moment().year() + 1,\n        },\n      })\n        .then((res) => {\n          // console.log(res);\n          if (res.data) {\n            var json_idb = res.data;\n\n            for (var i = 0; i < json_idb.length; i++) {\n              if (json_idb[i].service_type == 1)\n                this.chartData.idb.push(json_idb[i].y);\n              if (json_idb[i].service_type == 2)\n                this.chartData.rbi.push(json_idb[i].y);\n              if (json_idb[i].service_type == 3)\n                this.chartData.ffs.push(json_idb[i].y);\n              if (json_idb[i].service_type == 4)\n                this.chartData.itp.push(json_idb[i].y);\n            }\n\n            if (this.chartData.idb.length > 0)\n              this.chartOptions.series[0].data = this.chartData.idb;\n            if (this.chartData.rbi.length > 0)\n              this.chartOptions.series[1].data = this.chartData.rbi;\n            if (this.chartData.ffs.length > 0)\n              this.chartOptions.series[2].data = this.chartData.ffs;\n            if (this.chartData.itp.length > 0)\n              this.chartOptions.series[3].data = this.chartData.itp;\n          }\n        })\n        .catch((error) => {\n          this.$ons.notification.alert(\n            error.code + \" \" + error.response.status + \" \" + error.message\n          );\n        })\n        .finally(() => {});\n    },\n  },\n  computed: {},\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.chart-item {\n  min-height: 200px;\n}\n</style>"]},"metadata":{},"sourceType":"module"}