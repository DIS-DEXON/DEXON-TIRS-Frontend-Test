{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\n/**\r\n * DevExtreme (esm/exporter/exceljs/export.js)\r\n * Version: 21.2.7\r\n * Build date: Mon Apr 11 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { isDefined, isString, isDate, isObject, isFunction } from \"../../core/utils/type\";\nimport { ExportFormat } from \"./export_format\";\nimport { MergedRangesManager } from \"./export_merged_ranges_manager\";\nimport { extend } from \"../../core/utils/extend\";\nimport { ExportLoadPanel } from \"../common/export_load_panel\";\nimport { hasWindow } from \"../../core/utils/window\";\nvar MAX_DIGIT_WIDTH_IN_PIXELS = 7;\nvar MAX_EXCEL_COLUMN_WIDTH = 255;\nexport var Export = {\n  getFullOptions(options) {\n    var fullOptions = extend({}, options);\n\n    if (!(isDefined(fullOptions.worksheet) && isObject(fullOptions.worksheet))) {\n      throw Error('The \"worksheet\" field must contain an object.');\n    }\n\n    if (!isDefined(fullOptions.topLeftCell)) {\n      fullOptions.topLeftCell = {\n        row: 1,\n        column: 1\n      };\n    } else if (isString(fullOptions.topLeftCell)) {\n      var {\n        row: row,\n        col: col\n      } = fullOptions.worksheet.getCell(fullOptions.topLeftCell);\n      fullOptions.topLeftCell = {\n        row: row,\n        column: col\n      };\n    }\n\n    if (!isDefined(fullOptions.keepColumnWidths)) {\n      fullOptions.keepColumnWidths = true;\n    }\n\n    if (!isDefined(fullOptions.loadPanel)) {\n      fullOptions.loadPanel = {};\n    }\n\n    if (!isDefined(fullOptions.loadPanel.enabled)) {\n      fullOptions.loadPanel.enabled = true;\n    }\n\n    return fullOptions;\n  },\n\n  convertDateForExcelJS: date => new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds())),\n\n  setNumberFormat(excelCell, numberFormat) {\n    excelCell.numFmt = numberFormat;\n  },\n\n  getCellStyles(dataProvider) {\n    var styles = dataProvider.getStyles();\n    styles.forEach(style => {\n      var numberFormat = this.tryConvertToExcelNumberFormat(style.format, style.dataType);\n\n      if (isDefined(numberFormat)) {\n        numberFormat = numberFormat.replace(/&quot;/g, '\"');\n      }\n\n      style.numberFormat = numberFormat;\n    });\n    return styles;\n  },\n\n  tryConvertToExcelNumberFormat(format, dataType) {\n    var newFormat = ExportFormat.formatObjectConverter(format, dataType);\n    var currency = newFormat.currency;\n    format = newFormat.format;\n    dataType = newFormat.dataType;\n    return ExportFormat.convertFormat(format, newFormat.precision, dataType, currency);\n  },\n\n  setAlignment(excelCell, wrapText, horizontalAlignment) {\n    excelCell.alignment = excelCell.alignment || {};\n\n    if (isDefined(wrapText)) {\n      excelCell.alignment.wrapText = wrapText;\n    }\n\n    if (isDefined(horizontalAlignment)) {\n      excelCell.alignment.horizontal = horizontalAlignment;\n    }\n\n    excelCell.alignment.vertical = \"top\";\n  },\n\n  setColumnsWidth(worksheet, widths, startColumnIndex) {\n    if (!isDefined(widths)) {\n      return;\n    }\n\n    for (var i = 0; i < widths.length; i++) {\n      var columnWidth = widths[i];\n\n      if (\"number\" === typeof columnWidth && isFinite(columnWidth)) {\n        worksheet.getColumn(startColumnIndex + i).width = Math.min(MAX_EXCEL_COLUMN_WIDTH, Math.floor(columnWidth / MAX_DIGIT_WIDTH_IN_PIXELS * 100) / 100);\n      }\n    }\n  },\n\n  export(options, helpers) {\n    var _component$_getIntern;\n\n    var {\n      customizeCell: customizeCell,\n      component: component,\n      worksheet: worksheet,\n      topLeftCell: topLeftCell,\n      autoFilterEnabled: autoFilterEnabled,\n      keepColumnWidths: keepColumnWidths,\n      selectedRowsOnly: selectedRowsOnly,\n      loadPanel: loadPanel,\n      mergeRowFieldValues: mergeRowFieldValues,\n      mergeColumnFieldValues: mergeColumnFieldValues\n    } = options;\n    var internalComponent = (null === (_component$_getIntern = component._getInternalInstance) || void 0 === _component$_getIntern ? void 0 : _component$_getIntern.call(component)) || component;\n    var initialLoadPanelEnabledOption = internalComponent.option(\"loadPanel\") && internalComponent.option(\"loadPanel\").enabled;\n\n    if (initialLoadPanelEnabledOption) {\n      component.option(\"loadPanel.enabled\", false);\n    }\n\n    var exportLoadPanel;\n\n    if (loadPanel.enabled && hasWindow()) {\n      var $targetElement = helpers._getLoadPanelTargetElement(component);\n\n      var $container = helpers._getLoadPanelContainer(component);\n\n      exportLoadPanel = new ExportLoadPanel(component, $targetElement, $container, loadPanel);\n      exportLoadPanel.show();\n    }\n\n    var wrapText = !!component.option(\"wordWrapEnabled\");\n    worksheet.properties.outlineProperties = {\n      summaryBelow: false,\n      summaryRight: false\n    };\n    var cellRange = {\n      from: {\n        row: topLeftCell.row,\n        column: topLeftCell.column\n      },\n      to: {\n        row: topLeftCell.row,\n        column: topLeftCell.column\n      }\n    };\n    var dataProvider = component.getDataProvider(selectedRowsOnly);\n    return new Promise(resolve => {\n      dataProvider.ready().done(() => {\n        var columns = dataProvider.getColumns();\n        var dataRowsCount = dataProvider.getRowsCount();\n\n        if (keepColumnWidths) {\n          this.setColumnsWidth(worksheet, dataProvider.getColumnsWidths(), cellRange.from.column);\n        }\n\n        var mergedRangesManager = new MergedRangesManager(dataProvider, helpers, mergeRowFieldValues, mergeColumnFieldValues);\n        var styles = this.getCellStyles(dataProvider);\n\n        for (var rowIndex = 0; rowIndex < dataRowsCount; rowIndex++) {\n          var row = worksheet.getRow(cellRange.from.row + rowIndex);\n\n          helpers._trySetOutlineLevel(dataProvider, row, rowIndex);\n\n          this.exportRow(dataProvider, helpers, mergedRangesManager, rowIndex, columns.length, row, cellRange.from.column, customizeCell, wrapText, styles);\n\n          if (rowIndex >= 1) {\n            cellRange.to.row++;\n          }\n        }\n\n        mergedRangesManager.applyMergedRages(worksheet);\n        cellRange.to.column += columns.length > 0 ? columns.length - 1 : 0;\n        var worksheetViewSettings = worksheet.views[0] || {};\n\n        if (component.option(\"rtlEnabled\")) {\n          worksheetViewSettings.rightToLeft = true;\n        }\n\n        if (helpers._isFrozenZone(dataProvider)) {\n          if (-1 === Object.keys(worksheetViewSettings).indexOf(\"state\")) {\n            extend(worksheetViewSettings, helpers._getWorksheetFrozenState(dataProvider, cellRange));\n          }\n\n          helpers._trySetAutoFilter(dataProvider, worksheet, cellRange, autoFilterEnabled);\n        }\n\n        if (Object.keys(worksheetViewSettings).length > 0) {\n          worksheet.views = [worksheetViewSettings];\n        }\n\n        resolve(cellRange);\n      }).always(() => {\n        if (initialLoadPanelEnabledOption) {\n          component.option(\"loadPanel.enabled\", initialLoadPanelEnabledOption);\n        }\n\n        if (loadPanel.enabled && hasWindow()) {\n          exportLoadPanel.dispose();\n        }\n      });\n    });\n  },\n\n  exportRow(dataProvider, helpers, mergedRangesManager, rowIndex, cellCount, row, startColumnIndex, customizeCell, wrapText, styles) {\n    for (var cellIndex = 0; cellIndex < cellCount; cellIndex++) {\n      var cellData = dataProvider.getCellData(rowIndex, cellIndex, true);\n      var excelCell = row.getCell(startColumnIndex + cellIndex);\n      mergedRangesManager.updateMergedRanges(excelCell, rowIndex, cellIndex);\n      var cellInfo = mergedRangesManager.findMergedCellInfo(rowIndex, cellIndex);\n\n      if (isDefined(cellInfo) && excelCell !== cellInfo.masterCell) {\n        excelCell.style = cellInfo.masterCell.style;\n        excelCell.value = cellInfo.masterCell.value;\n      } else {\n        if (isDate(cellData.value)) {\n          excelCell.value = this.convertDateForExcelJS(cellData.value);\n        } else {\n          excelCell.value = cellData.value;\n        }\n\n        if (isDefined(excelCell.value)) {\n          var {\n            bold: bold,\n            alignment: horizontalAlignment,\n            numberFormat: numberFormat\n          } = styles[dataProvider.getStyleId(rowIndex, cellIndex)];\n\n          if (isDefined(numberFormat)) {\n            this.setNumberFormat(excelCell, numberFormat);\n          } else if (isString(excelCell.value) && /^[@=+-]/.test(excelCell.value)) {\n            this.setNumberFormat(excelCell, \"@\");\n          }\n\n          helpers._trySetFont(excelCell, bold);\n\n          this.setAlignment(excelCell, wrapText, horizontalAlignment);\n        }\n      }\n\n      if (isFunction(customizeCell)) {\n        customizeCell(helpers._getCustomizeCellOptions(excelCell, cellData.cellSourceData));\n      }\n    }\n  }\n\n};","map":{"version":3,"sources":["/Users/dexon/Projects/AI-Portal-Frontend/node_modules/devextreme/esm/exporter/exceljs/export.js"],"names":["isDefined","isString","isDate","isObject","isFunction","ExportFormat","MergedRangesManager","extend","ExportLoadPanel","hasWindow","MAX_DIGIT_WIDTH_IN_PIXELS","MAX_EXCEL_COLUMN_WIDTH","Export","getFullOptions","options","fullOptions","worksheet","Error","topLeftCell","row","column","col","getCell","keepColumnWidths","loadPanel","enabled","convertDateForExcelJS","date","Date","UTC","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","setNumberFormat","excelCell","numberFormat","numFmt","getCellStyles","dataProvider","styles","getStyles","forEach","style","tryConvertToExcelNumberFormat","format","dataType","replace","newFormat","formatObjectConverter","currency","convertFormat","precision","setAlignment","wrapText","horizontalAlignment","alignment","horizontal","vertical","setColumnsWidth","widths","startColumnIndex","i","length","columnWidth","isFinite","getColumn","width","Math","min","floor","export","helpers","_component$_getIntern","customizeCell","component","autoFilterEnabled","selectedRowsOnly","mergeRowFieldValues","mergeColumnFieldValues","internalComponent","_getInternalInstance","call","initialLoadPanelEnabledOption","option","exportLoadPanel","$targetElement","_getLoadPanelTargetElement","$container","_getLoadPanelContainer","show","properties","outlineProperties","summaryBelow","summaryRight","cellRange","from","to","getDataProvider","Promise","resolve","ready","done","columns","getColumns","dataRowsCount","getRowsCount","getColumnsWidths","mergedRangesManager","rowIndex","getRow","_trySetOutlineLevel","exportRow","applyMergedRages","worksheetViewSettings","views","rightToLeft","_isFrozenZone","Object","keys","indexOf","_getWorksheetFrozenState","_trySetAutoFilter","always","dispose","cellCount","cellIndex","cellData","getCellData","updateMergedRanges","cellInfo","findMergedCellInfo","masterCell","value","bold","getStyleId","test","_trySetFont","_getCustomizeCellOptions","cellSourceData"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/exporter/exceljs/export.js)\r\n * Version: 21.2.7\r\n * Build date: Mon Apr 11 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    isDefined,\r\n    isString,\r\n    isDate,\r\n    isObject,\r\n    isFunction\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    ExportFormat\r\n} from \"./export_format\";\r\nimport {\r\n    MergedRangesManager\r\n} from \"./export_merged_ranges_manager\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    ExportLoadPanel\r\n} from \"../common/export_load_panel\";\r\nimport {\r\n    hasWindow\r\n} from \"../../core/utils/window\";\r\nvar MAX_DIGIT_WIDTH_IN_PIXELS = 7;\r\nvar MAX_EXCEL_COLUMN_WIDTH = 255;\r\nexport var Export = {\r\n    getFullOptions(options) {\r\n        var fullOptions = extend({}, options);\r\n        if (!(isDefined(fullOptions.worksheet) && isObject(fullOptions.worksheet))) {\r\n            throw Error('The \"worksheet\" field must contain an object.')\r\n        }\r\n        if (!isDefined(fullOptions.topLeftCell)) {\r\n            fullOptions.topLeftCell = {\r\n                row: 1,\r\n                column: 1\r\n            }\r\n        } else if (isString(fullOptions.topLeftCell)) {\r\n            var {\r\n                row: row,\r\n                col: col\r\n            } = fullOptions.worksheet.getCell(fullOptions.topLeftCell);\r\n            fullOptions.topLeftCell = {\r\n                row: row,\r\n                column: col\r\n            }\r\n        }\r\n        if (!isDefined(fullOptions.keepColumnWidths)) {\r\n            fullOptions.keepColumnWidths = true\r\n        }\r\n        if (!isDefined(fullOptions.loadPanel)) {\r\n            fullOptions.loadPanel = {}\r\n        }\r\n        if (!isDefined(fullOptions.loadPanel.enabled)) {\r\n            fullOptions.loadPanel.enabled = true\r\n        }\r\n        return fullOptions\r\n    },\r\n    convertDateForExcelJS: date => new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds())),\r\n    setNumberFormat(excelCell, numberFormat) {\r\n        excelCell.numFmt = numberFormat\r\n    },\r\n    getCellStyles(dataProvider) {\r\n        var styles = dataProvider.getStyles();\r\n        styles.forEach(style => {\r\n            var numberFormat = this.tryConvertToExcelNumberFormat(style.format, style.dataType);\r\n            if (isDefined(numberFormat)) {\r\n                numberFormat = numberFormat.replace(/&quot;/g, '\"')\r\n            }\r\n            style.numberFormat = numberFormat\r\n        });\r\n        return styles\r\n    },\r\n    tryConvertToExcelNumberFormat(format, dataType) {\r\n        var newFormat = ExportFormat.formatObjectConverter(format, dataType);\r\n        var currency = newFormat.currency;\r\n        format = newFormat.format;\r\n        dataType = newFormat.dataType;\r\n        return ExportFormat.convertFormat(format, newFormat.precision, dataType, currency)\r\n    },\r\n    setAlignment(excelCell, wrapText, horizontalAlignment) {\r\n        excelCell.alignment = excelCell.alignment || {};\r\n        if (isDefined(wrapText)) {\r\n            excelCell.alignment.wrapText = wrapText\r\n        }\r\n        if (isDefined(horizontalAlignment)) {\r\n            excelCell.alignment.horizontal = horizontalAlignment\r\n        }\r\n        excelCell.alignment.vertical = \"top\"\r\n    },\r\n    setColumnsWidth(worksheet, widths, startColumnIndex) {\r\n        if (!isDefined(widths)) {\r\n            return\r\n        }\r\n        for (var i = 0; i < widths.length; i++) {\r\n            var columnWidth = widths[i];\r\n            if (\"number\" === typeof columnWidth && isFinite(columnWidth)) {\r\n                worksheet.getColumn(startColumnIndex + i).width = Math.min(MAX_EXCEL_COLUMN_WIDTH, Math.floor(columnWidth / MAX_DIGIT_WIDTH_IN_PIXELS * 100) / 100)\r\n            }\r\n        }\r\n    },\r\n    export (options, helpers) {\r\n        var _component$_getIntern;\r\n        var {\r\n            customizeCell: customizeCell,\r\n            component: component,\r\n            worksheet: worksheet,\r\n            topLeftCell: topLeftCell,\r\n            autoFilterEnabled: autoFilterEnabled,\r\n            keepColumnWidths: keepColumnWidths,\r\n            selectedRowsOnly: selectedRowsOnly,\r\n            loadPanel: loadPanel,\r\n            mergeRowFieldValues: mergeRowFieldValues,\r\n            mergeColumnFieldValues: mergeColumnFieldValues\r\n        } = options;\r\n        var internalComponent = (null === (_component$_getIntern = component._getInternalInstance) || void 0 === _component$_getIntern ? void 0 : _component$_getIntern.call(component)) || component;\r\n        var initialLoadPanelEnabledOption = internalComponent.option(\"loadPanel\") && internalComponent.option(\"loadPanel\").enabled;\r\n        if (initialLoadPanelEnabledOption) {\r\n            component.option(\"loadPanel.enabled\", false)\r\n        }\r\n        var exportLoadPanel;\r\n        if (loadPanel.enabled && hasWindow()) {\r\n            var $targetElement = helpers._getLoadPanelTargetElement(component);\r\n            var $container = helpers._getLoadPanelContainer(component);\r\n            exportLoadPanel = new ExportLoadPanel(component, $targetElement, $container, loadPanel);\r\n            exportLoadPanel.show()\r\n        }\r\n        var wrapText = !!component.option(\"wordWrapEnabled\");\r\n        worksheet.properties.outlineProperties = {\r\n            summaryBelow: false,\r\n            summaryRight: false\r\n        };\r\n        var cellRange = {\r\n            from: {\r\n                row: topLeftCell.row,\r\n                column: topLeftCell.column\r\n            },\r\n            to: {\r\n                row: topLeftCell.row,\r\n                column: topLeftCell.column\r\n            }\r\n        };\r\n        var dataProvider = component.getDataProvider(selectedRowsOnly);\r\n        return new Promise(resolve => {\r\n            dataProvider.ready().done(() => {\r\n                var columns = dataProvider.getColumns();\r\n                var dataRowsCount = dataProvider.getRowsCount();\r\n                if (keepColumnWidths) {\r\n                    this.setColumnsWidth(worksheet, dataProvider.getColumnsWidths(), cellRange.from.column)\r\n                }\r\n                var mergedRangesManager = new MergedRangesManager(dataProvider, helpers, mergeRowFieldValues, mergeColumnFieldValues);\r\n                var styles = this.getCellStyles(dataProvider);\r\n                for (var rowIndex = 0; rowIndex < dataRowsCount; rowIndex++) {\r\n                    var row = worksheet.getRow(cellRange.from.row + rowIndex);\r\n                    helpers._trySetOutlineLevel(dataProvider, row, rowIndex);\r\n                    this.exportRow(dataProvider, helpers, mergedRangesManager, rowIndex, columns.length, row, cellRange.from.column, customizeCell, wrapText, styles);\r\n                    if (rowIndex >= 1) {\r\n                        cellRange.to.row++\r\n                    }\r\n                }\r\n                mergedRangesManager.applyMergedRages(worksheet);\r\n                cellRange.to.column += columns.length > 0 ? columns.length - 1 : 0;\r\n                var worksheetViewSettings = worksheet.views[0] || {};\r\n                if (component.option(\"rtlEnabled\")) {\r\n                    worksheetViewSettings.rightToLeft = true\r\n                }\r\n                if (helpers._isFrozenZone(dataProvider)) {\r\n                    if (-1 === Object.keys(worksheetViewSettings).indexOf(\"state\")) {\r\n                        extend(worksheetViewSettings, helpers._getWorksheetFrozenState(dataProvider, cellRange))\r\n                    }\r\n                    helpers._trySetAutoFilter(dataProvider, worksheet, cellRange, autoFilterEnabled)\r\n                }\r\n                if (Object.keys(worksheetViewSettings).length > 0) {\r\n                    worksheet.views = [worksheetViewSettings]\r\n                }\r\n                resolve(cellRange)\r\n            }).always(() => {\r\n                if (initialLoadPanelEnabledOption) {\r\n                    component.option(\"loadPanel.enabled\", initialLoadPanelEnabledOption)\r\n                }\r\n                if (loadPanel.enabled && hasWindow()) {\r\n                    exportLoadPanel.dispose()\r\n                }\r\n            })\r\n        })\r\n    },\r\n    exportRow(dataProvider, helpers, mergedRangesManager, rowIndex, cellCount, row, startColumnIndex, customizeCell, wrapText, styles) {\r\n        for (var cellIndex = 0; cellIndex < cellCount; cellIndex++) {\r\n            var cellData = dataProvider.getCellData(rowIndex, cellIndex, true);\r\n            var excelCell = row.getCell(startColumnIndex + cellIndex);\r\n            mergedRangesManager.updateMergedRanges(excelCell, rowIndex, cellIndex);\r\n            var cellInfo = mergedRangesManager.findMergedCellInfo(rowIndex, cellIndex);\r\n            if (isDefined(cellInfo) && excelCell !== cellInfo.masterCell) {\r\n                excelCell.style = cellInfo.masterCell.style;\r\n                excelCell.value = cellInfo.masterCell.value\r\n            } else {\r\n                if (isDate(cellData.value)) {\r\n                    excelCell.value = this.convertDateForExcelJS(cellData.value)\r\n                } else {\r\n                    excelCell.value = cellData.value\r\n                }\r\n                if (isDefined(excelCell.value)) {\r\n                    var {\r\n                        bold: bold,\r\n                        alignment: horizontalAlignment,\r\n                        numberFormat: numberFormat\r\n                    } = styles[dataProvider.getStyleId(rowIndex, cellIndex)];\r\n                    if (isDefined(numberFormat)) {\r\n                        this.setNumberFormat(excelCell, numberFormat)\r\n                    } else if (isString(excelCell.value) && /^[@=+-]/.test(excelCell.value)) {\r\n                        this.setNumberFormat(excelCell, \"@\")\r\n                    }\r\n                    helpers._trySetFont(excelCell, bold);\r\n                    this.setAlignment(excelCell, wrapText, horizontalAlignment)\r\n                }\r\n            }\r\n            if (isFunction(customizeCell)) {\r\n                customizeCell(helpers._getCustomizeCellOptions(excelCell, cellData.cellSourceData))\r\n            }\r\n        }\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}