{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n'use strict';\n\nimport \"core-js/modules/es.error.cause.js\";\nimport { getDocument } from 'pdfjs-dist';\nimport { DefaultAnnotationLayerFactory, DefaultTextLayerFactory, PDFFindController, PDFLinkService, PDFPageView, EventBus } from 'pdfjs-dist/web/pdf_viewer.js';\nimport resizeSensor from 'vue-resize-sensor';\nimport PdfjsWorker from 'pdfjs-dist/build/pdf.worker.entry';\n\nfunction isPDFDocumentLoadingTask(obj) {\n  return typeof obj === 'object' && obj !== null && obj.__PDFDocumentLoadingTask === true;\n}\n\nexport function createLoadingTask(src, options) {\n  var source;\n  if (typeof src === 'string') source = {\n    url: src\n  };else if (typeof src === 'object' && src !== null) source = Object.assign({}, src);else throw new TypeError('invalid src type');\n  var loadingTask = getDocument(source).promise;\n  loadingTask.__PDFDocumentLoadingTask = true; // since PDFDocumentLoadingTask is not public\n\n  if (options && options.onPassword) loadingTask.onPassword = options.onPassword;\n  if (options && options.onProgress) loadingTask.onProgress = options.onProgress;\n  return loadingTask;\n}\nexport default {\n  createLoadingTask: createLoadingTask,\n  components: {\n    resizeSensor\n  },\n  props: {\n    src: {\n      type: [String, Object, Promise],\n      default: ''\n    },\n    page: {\n      type: Number,\n      default: 1\n    },\n    rotate: {\n      type: Number,\n      default: 0\n    },\n    scale: {\n      type: [Number, String],\n      default: 'page-width'\n    },\n    resize: {\n      type: Boolean,\n      default: false\n    },\n    annotation: {\n      type: Boolean,\n      default: false\n    },\n    text: {\n      type: Boolean,\n      default: true\n    }\n  },\n  data: function () {\n    return {\n      internalSrc: this.src,\n      pdf: null,\n      pdfViewer: null,\n      loading: true\n    };\n  },\n  watch: {\n    pdf: function (val) {\n      var pdfInfo = val.pdfInfo || val._pdfInfo;\n      this.$emit('numpages', pdfInfo.numPages);\n    },\n    page: function (val) {\n      var self = this;\n      this.pdf.getPage(val).then(function (pdfPage) {\n        self.pdfViewer.setPdfPage(pdfPage);\n        self.pdfViewer.draw();\n      });\n    },\n    scale: function (val) {\n      this.drawScaled(val);\n    },\n    rotate: function (newRotate) {\n      if (this.pdfViewer) {\n        this.pdfViewer.update(this.scale, newRotate);\n        this.pdfViewer.draw();\n      }\n    }\n  },\n  mounted: function () {\n    var self = this;\n\n    if (!isPDFDocumentLoadingTask(self.internalSrc)) {\n      self.internalSrc = createLoadingTask(self.internalSrc);\n      self.$emit('loading', true);\n    }\n\n    var container = this.$refs.container;\n    var eventBus = new EventBus(); // (Optionally) enable hyperlinks within PDF files.\n\n    self.pdfLinkService = new PDFLinkService({\n      eventBus: eventBus,\n      externalLinkTarget: 2\n    }); // (Optionally) enable find controller.\n\n    self.pdfFindController = new PDFFindController({\n      eventBus: eventBus,\n      linkService: self.pdfLinkService\n    });\n    let annotationLayer = undefined,\n        textLayer = undefined;\n\n    if (self.annotation) {\n      annotationLayer = new DefaultAnnotationLayerFactory();\n    }\n\n    if (self.text) {\n      textLayer = new DefaultTextLayerFactory();\n    }\n\n    self.internalSrc.then(function (pdfDocument) {\n      // Document loaded, retrieving the page.\n      self.pdf = pdfDocument;\n      return pdfDocument.getPage(self.page);\n    }).then(function (pdfPage) {\n      // Creating the page view with default parameters.\n      self.pdfViewer = new PDFPageView({\n        container: container,\n        id: self.page,\n        scale: 1,\n        defaultViewport: pdfPage.getViewport({\n          scale: 1\n        }),\n        eventBus: eventBus,\n        textLayerFactory: textLayer,\n        annotationLayerFactory: annotationLayer\n      }); // Associates the actual page with the view, and drawing it\n\n      self.pdfViewer.setPdfPage(pdfPage); // Set up a scrollPageIntoView function for our links\n\n      var viewer = {\n        scrollPageIntoView: function (params) {\n          // Send an event when clicking internal links so we can handle loading/scrolling to the correct page\n          self.$emit('link-clicked', params);\n        }\n      };\n      self.pdfLinkService.setDocument(self.pdf);\n      self.pdfLinkService.setViewer(viewer);\n      self.pdfFindController.setDocument(self.pdf);\n      self.drawScaled(self.scale);\n      self.loading = false;\n      self.$emit('loading', false);\n    }).catch(err => {\n      self.$emit('error', err);\n      self.loading = false;\n      self.$emit('loading', false);\n    });\n  },\n\n  beforeDestroy() {\n    var self = this;\n\n    if (self.pdfViewer) {\n      self.pdfViewer.destroy();\n      self.pdfViewer = null;\n    }\n  },\n\n  methods: {\n    calculateScale: function (width = -1, height = -1) {\n      this.pdfViewer.update(1, this.rotate); // Reset scaling to 1 so that \"this.pdfViewer.viewport.width\" gives proper width;\n\n      if (width === -1 && height === -1) {\n        width = this.$refs.container.offsetWidth;\n      }\n\n      return width / this.pdfViewer.viewport.width;\n    },\n    calculateScaleHeight: function () {\n      this.pdfViewer.update(1, this.rotate); // Reset scaling to 1 so that \"this.pdfViewer.viewport.width\" gives proper width;\n\n      var height = this.$refs.container.offsetHeight;\n      var parentel = this.$refs.container.parentElement.parentElement;\n      return parentel.offsetHeight / height;\n    },\n    drawScaled: function (newScale) {\n      if (this.pdfViewer) {\n        if (newScale === 'page-width') {\n          newScale = this.calculateScale();\n          this.$emit(\"update:scale\", newScale);\n        } else if (newScale === 'page-height') {\n          newScale = this.calculateScaleHeight();\n          this.$emit(\"update:scale\", newScale);\n        }\n\n        this.pdfViewer.update(newScale, this.rotate); // The SimpleLinkService from the DefaultAnnotationLayerFactory doesn't do anything with links so override with our LinkService after it is created\n\n        if (this.annotation) {\n          this.pdfViewer.annotationLayer = this.pdfViewer.annotationLayerFactory.createAnnotationLayerBuilder(this.pdfViewer.div, this.pdfViewer.pdfPage);\n          this.pdfViewer.annotationLayer.linkService = this.pdfLinkService;\n        }\n\n        this.pdfViewer.draw(); // The findController needs the text layer to have been created in the Draw() function, so link it in now\n\n        if (this.text) {\n          this.pdfViewer.textLayer.findController = this.pdfFindController;\n        }\n\n        this.loading = false;\n        this.$emit('loading', false);\n      }\n    },\n    resizeScale: function () {\n      if (this.resize) {\n        this.drawScaled('page-width');\n      }\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;AAUA;;;AAEA;AACA,SACAA,6BADA,EAEAC,uBAFA,EAGAC,iBAHA,EAIAC,cAJA,EAKAC,WALA,EAMAC,QANA,QAOA,8BAPA;AAQA;AACA;;AACA;AACA;AACA;;AAEA;AACA;AACA,+BACAC;AACAC;AADA,IADA,KAIA,6CACAD,gCADA,KAGA;AAEA;AACAE,8CAZA,CAYA;;AAEA,qCACAA;AAEA,qCACAA;AAEA;AACA;AAEA;AACAC,sCADA;AAEAC;AACAC;AADA,GAFA;AAKAC;AACAC;AACAC,qCADA;AAEAC;AAFA,KADA;AAKAC;AACAF,kBADA;AAEAC;AAFA,KALA;AASAE;AACAH,kBADA;AAEAC;AAFA,KATA;AAaAG;AACAJ,4BADA;AAEAC;AAFA,KAbA;AAiBAI;AACAL,mBADA;AAEAC;AAFA,KAjBA;AAqBAK;AACAN,mBADA;AAEAC;AAFA,KArBA;AAyBAM;AACAP,mBADA;AAEAC;AAFA;AAzBA,GALA;AAmCAO;AACA;AACAC,2BADA;AAEAC,eAFA;AAGAC,qBAHA;AAIAC;AAJA;AAMA,GA1CA;AA2CAC;AACAH;AACA;AACA;AACA,KAJA;AAKAR;AACA;AACA;AACAY;AACAA;AACA,OAHA;AAIA,KAXA;AAYAV;AACA;AACA,KAdA;AAeAD;AACA;AACA;AACA;AACA;AACA;AApBA,GA3CA;AAiEAY;AACA;;AACA;AACAD;AACAA;AACA;;AAEA;AACA,kCARA,CAUA;;AACAA;AACAE,wBADA;AAEAC;AAFA,OAXA,CAgBA;;AACAH;AACAE,wBADA;AAEAE;AAFA;AAKA;AAAA,QACAC,qBADA;;AAGA;AACAC;AACA;;AACA;AACAD;AACA;;AAEAL,qBACAO,IADA,CACA;AACA;AACAP;AACA;AACA,KALA,EAKAO,IALA,CAKA;AACA;AACAP;AACAQ,4BADA;AAEAC,qBAFA;AAGAnB,gBAHA;AAIAoB;AACApB;AADA,UAJA;AAOAY,0BAPA;AAQAS,mCARA;AASAC;AATA,SAFA,CAaA;;AACAZ,yCAdA,CAeA;;AACA;AACAa;AACA;AACAb;AACA;AAJA;AAMAA;AACAA;AACAA;AACAA;AAEAA;AACAA;AACA,KAlCA,EAkCAc,KAlCA,CAkCAC;AACAf;AACAA;AACAA;AACA,KAtCA;AAuCA,GAxIA;;AAyIAgB;AACA;;AACA;AACAhB;AACAA;AACA;AACA,GA/IA;;AAgJAiB;AACAC;AACA,4CADA,CACA;;AACA;AACAC;AACA;;AAEA;AACA,KARA;AASAC;AACA,4CADA,CACA;;AACA;AACA;AACA;AACA,KAdA;AAeAC;AACA;AACA;AACAC;AACA;AACA,SAHA,MAIA;AACAA;AACA;AACA;;AACA,qDATA,CAUA;;AACA;AACA;AACA;AACA;;AACA,8BAfA,CAgBA;;AACA;AACA;AACA;;AACA;AACA;AACA;AACA,KAvCA;AAwCAC;AACA;AACA;AACA;AACA;AA5CA;AAhJA","names":["DefaultAnnotationLayerFactory","DefaultTextLayerFactory","PDFFindController","PDFLinkService","PDFPageView","EventBus","source","url","loadingTask","createLoadingTask","components","resizeSensor","props","src","type","default","page","rotate","scale","resize","annotation","text","data","internalSrc","pdf","pdfViewer","loading","watch","self","mounted","eventBus","externalLinkTarget","linkService","textLayer","annotationLayer","then","container","id","defaultViewport","textLayerFactory","annotationLayerFactory","scrollPageIntoView","catch","err","beforeDestroy","methods","calculateScale","width","calculateScaleHeight","drawScaled","newScale","resizeScale"],"sourceRoot":"node_modules/pdfvuer/src","sources":["Pdfvuer.vue"],"sourcesContent":["<template>\n  <div>\n    <slot v-if=\"loading\" name=\"loading\"/>\n    <div id=\"viewerContainer\" ref=\"container\">\n      <div id=\"viewer\" class=\"pdfViewer\"/>\n      <resizeSensor :initial=\"true\" @resize=\"resizeScale\"/>\n    </div>\n  </div>\n</template>\n<script>\n  'use strict';\n\n  import { getDocument } from 'pdfjs-dist';\n  import {\n    DefaultAnnotationLayerFactory,\n    DefaultTextLayerFactory,\n    PDFFindController,\n    PDFLinkService,\n    PDFPageView,\n    EventBus\n  } from 'pdfjs-dist/web/pdf_viewer.js';\n  import resizeSensor from 'vue-resize-sensor'\n  import PdfjsWorker from 'pdfjs-dist/build/pdf.worker.entry'\n  function isPDFDocumentLoadingTask(obj) {\n    return typeof (obj) === 'object' && obj !== null && obj.__PDFDocumentLoadingTask === true;\n  }\n\n  export function createLoadingTask(src, options) {\n    var source;\n    if (typeof (src) === 'string')\n      source = {\n        url: src\n      };\n    else if (typeof (src) === 'object' && src !== null)\n      source = Object.assign({}, src);\n    else\n      throw new TypeError('invalid src type');\n\n    var loadingTask = getDocument(source).promise;\n    loadingTask.__PDFDocumentLoadingTask = true; // since PDFDocumentLoadingTask is not public\n\n    if (options && options.onPassword)\n      loadingTask.onPassword = options.onPassword;\n\n    if (options && options.onProgress)\n      loadingTask.onProgress = options.onProgress;\n\n    return loadingTask;\n  }\n\n  export default {\n    createLoadingTask: createLoadingTask,\n    components: {\n      resizeSensor\n    },\n    props: {\n      src: {\n        type: [String, Object, Promise],\n        default: '',\n      },\n      page: {\n        type: Number,\n        default: 1,\n      },\n      rotate: {\n        type: Number,\n        default: 0,\n      },\n      scale: {\n        type: [Number, String],\n        default: 'page-width',\n      },\n      resize: {\n        type: Boolean,\n        default: false,\n      },\n      annotation: {\n        type: Boolean,\n        default: false,\n      },\n      text: {\n        type: Boolean,\n        default: true,\n      },\n    },\n    data: function () {\n      return {\n        internalSrc: this.src,\n        pdf: null,\n        pdfViewer: null,\n        loading: true,\n      }\n    },\n    watch: {\n      pdf: function (val) {\n        var pdfInfo = val.pdfInfo || val._pdfInfo\n        this.$emit('numpages', pdfInfo.numPages);\n      },\n      page: function (val) {\n        var self = this;\n        this.pdf.getPage(val).then(function (pdfPage) {\n          self.pdfViewer.setPdfPage(pdfPage);\n          self.pdfViewer.draw();\n        });\n      },\n      scale: function (val) {\n        this.drawScaled(val);\n      },\n      rotate: function (newRotate) {\n        if (this.pdfViewer) {\n          this.pdfViewer.update(this.scale, newRotate);\n          this.pdfViewer.draw();\n        }\n      },\n    },\n    mounted: function () {\n      var self = this;\n      if (!isPDFDocumentLoadingTask(self.internalSrc)) {\n        self.internalSrc = createLoadingTask(self.internalSrc);\n        self.$emit('loading', true);\n      }\n\n      var container = this.$refs.container;\n      var eventBus = new EventBus();\n\n      // (Optionally) enable hyperlinks within PDF files.\n      self.pdfLinkService = new PDFLinkService({\n        eventBus: eventBus,\n        externalLinkTarget: 2\n      });\n\n      // (Optionally) enable find controller.\n      self.pdfFindController = new PDFFindController({\n        eventBus: eventBus,\n        linkService: self.pdfLinkService\n      });\n\n      let annotationLayer = undefined,\n        textLayer = undefined;\n\n      if (self.annotation) {\n        annotationLayer = new DefaultAnnotationLayerFactory();\n      }\n      if (self.text) {\n        textLayer = new DefaultTextLayerFactory();\n      }\n\n      self.internalSrc\n        .then(function (pdfDocument) {\n          // Document loaded, retrieving the page.\n          self.pdf = pdfDocument;\n          return pdfDocument.getPage(self.page)\n        }).then(function (pdfPage) {\n          // Creating the page view with default parameters.\n          self.pdfViewer = new PDFPageView({\n            container: container,\n            id: self.page,\n            scale: 1,\n            defaultViewport: pdfPage.getViewport({\n              scale: 1\n            }),\n            eventBus: eventBus,\n            textLayerFactory: textLayer,\n            annotationLayerFactory: annotationLayer,\n          });\n          // Associates the actual page with the view, and drawing it\n          self.pdfViewer.setPdfPage(pdfPage);\n          // Set up a scrollPageIntoView function for our links\n          var viewer = {\n            scrollPageIntoView: function(params) {\n              // Send an event when clicking internal links so we can handle loading/scrolling to the correct page\n              self.$emit('link-clicked', params);\n            },\n          };\n          self.pdfLinkService.setDocument(self.pdf);\n          self.pdfLinkService.setViewer(viewer);\n          self.pdfFindController.setDocument(self.pdf);\n          self.drawScaled(self.scale);\n\n          self.loading = false;\n          self.$emit('loading', false);\n        }).catch(err => {\n          self.$emit('error', err)\n          self.loading = false\n          self.$emit('loading', false);\n        })\n    },\n    beforeDestroy() {\n      var self = this;\n      if (self.pdfViewer) {\n        self.pdfViewer.destroy();\n        self.pdfViewer = null;\n      }\n    },\n    methods: {\n      calculateScale: function (width = -1, height = -1) {\n        this.pdfViewer.update(1, this.rotate); // Reset scaling to 1 so that \"this.pdfViewer.viewport.width\" gives proper width;\n        if (width === -1 && height === -1) {\n          width = this.$refs.container.offsetWidth;\n        }\n\n        return width / this.pdfViewer.viewport.width;\n      },\n      calculateScaleHeight: function () {\n        this.pdfViewer.update(1, this.rotate); // Reset scaling to 1 so that \"this.pdfViewer.viewport.width\" gives proper width;\n        var height = this.$refs.container.offsetHeight;\n        var parentel = this.$refs.container.parentElement.parentElement;\n        return parentel.offsetHeight / height;\n      },\n      drawScaled: function (newScale) {\n        if (this.pdfViewer) {\n          if (newScale === 'page-width') {\n            newScale = this.calculateScale();\n            this.$emit(\"update:scale\", newScale);\n          }\n          else if (newScale === 'page-height') {\n            newScale = this.calculateScaleHeight();\n            this.$emit(\"update:scale\", newScale);\n          }\n          this.pdfViewer.update(newScale, this.rotate);\n          // The SimpleLinkService from the DefaultAnnotationLayerFactory doesn't do anything with links so override with our LinkService after it is created\n          if(this.annotation) {\n            this.pdfViewer.annotationLayer = this.pdfViewer.annotationLayerFactory.createAnnotationLayerBuilder(this.pdfViewer.div, this.pdfViewer.pdfPage);\n            this.pdfViewer.annotationLayer.linkService = this.pdfLinkService;\n          }\n          this.pdfViewer.draw();\n          // The findController needs the text layer to have been created in the Draw() function, so link it in now\n          if (this.text) {\n            this.pdfViewer.textLayer.findController = this.pdfFindController;\n          }\n          this.loading = false;\n          this.$emit('loading', false);\n        }\n      },\n      resizeScale: function () {\n        if (this.resize) {\n          this.drawScaled('page-width');\n        }\n      }\n    }\n  }\n</script>\n<style src=\"pdfjs-dist/web/pdf_viewer.css\"></style>"]},"metadata":{},"sourceType":"module"}