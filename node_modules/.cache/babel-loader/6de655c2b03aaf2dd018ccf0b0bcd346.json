{"ast":null,"code":"import \"core-js/modules/es.string.bold.js\";\nimport \"core-js/modules/es.error.cause.js\";\n\n/**\r\n * DevExtreme (esm/exporter/exceljs/export_data_grid.js)\r\n * Version: 21.2.7\r\n * Build date: Mon Apr 11 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { isDefined, isObject } from \"../../core/utils/type\";\nimport { Export } from \"./export\";\nimport errors from \"../../core/errors\";\nvar helpers = {\n  _trySetAutoFilter: function _trySetAutoFilter(dataProvider, worksheet, cellRange, autoFilterEnabled) {\n    if (autoFilterEnabled) {\n      if (!isDefined(worksheet.autoFilter) && dataProvider.getRowsCount() > 0) {\n        var dataRange = {\n          from: {\n            row: cellRange.from.row + dataProvider.getHeaderRowCount() - 1,\n            column: cellRange.from.column\n          },\n          to: cellRange.to\n        };\n        worksheet.autoFilter = dataRange;\n      }\n    }\n  },\n  _trySetFont: function _trySetFont(excelCell, bold) {\n    if (isDefined(bold)) {\n      excelCell.font = excelCell.font || {};\n      excelCell.font.bold = bold;\n    }\n  },\n  _getWorksheetFrozenState: function _getWorksheetFrozenState(dataProvider, cellRange) {\n    return {\n      state: \"frozen\",\n      ySplit: cellRange.from.row + dataProvider.getFrozenArea().y - 1\n    };\n  },\n  _trySetOutlineLevel: function _trySetOutlineLevel(dataProvider, row, rowIndex) {\n    if (rowIndex >= dataProvider.getHeaderRowCount()) {\n      row.outlineLevel = dataProvider.getGroupLevel(rowIndex);\n    }\n  },\n  _getCustomizeCellOptions: function _getCustomizeCellOptions(excelCell, gridCell) {\n    var options = {\n      excelCell: excelCell,\n      gridCell: gridCell\n    };\n    Object.defineProperty(options, \"cell\", {\n      get: function get() {\n        errors.log(\"W0003\", \"CustomizeCell handler argument\", \"cell\", \"20.1\", \"Use the 'excelCell' field instead\");\n        return excelCell;\n      }\n    });\n    return options;\n  },\n  _isFrozenZone: function _isFrozenZone(dataProvider) {\n    return dataProvider.getHeaderRowCount() > 0;\n  },\n  _isHeaderCell: function _isHeaderCell(dataProvider, rowIndex) {\n    return rowIndex < dataProvider.getHeaderRowCount();\n  },\n  _allowToMergeRange: function _allowToMergeRange() {\n    return true;\n  },\n  _getLoadPanelTargetElement: function _getLoadPanelTargetElement(component) {\n    return component.getView(\"rowsView\").element();\n  },\n  _getLoadPanelContainer: function _getLoadPanelContainer(component) {\n    return component.getView(\"rowsView\").element().parent();\n  }\n};\n\nfunction exportDataGrid(options) {\n  return Export.export(_getFullOptions(options), helpers);\n}\n\nfunction _getFullOptions(options) {\n  if (!(isDefined(options) && isObject(options))) {\n    throw Error('The \"exportDataGrid\" method requires a configuration object.');\n  }\n\n  if (!(isDefined(options.component) && isObject(options.component) && \"dxDataGrid\" === options.component.NAME)) {\n    throw Error('The \"component\" field must contain a DataGrid instance.');\n  }\n\n  if (!isDefined(options.selectedRowsOnly)) {\n    options.selectedRowsOnly = false;\n  }\n\n  if (!isDefined(options.autoFilterEnabled)) {\n    options.autoFilterEnabled = false;\n  }\n\n  return Export.getFullOptions(options);\n}\n\nexport { exportDataGrid };","map":{"version":3,"sources":["/Users/dexon/Projects/AI-Portal-Frontend/node_modules/devextreme/esm/exporter/exceljs/export_data_grid.js"],"names":["isDefined","isObject","Export","errors","helpers","_trySetAutoFilter","dataProvider","worksheet","cellRange","autoFilterEnabled","autoFilter","getRowsCount","dataRange","from","row","getHeaderRowCount","column","to","_trySetFont","excelCell","bold","font","_getWorksheetFrozenState","state","ySplit","getFrozenArea","y","_trySetOutlineLevel","rowIndex","outlineLevel","getGroupLevel","_getCustomizeCellOptions","gridCell","options","Object","defineProperty","get","log","_isFrozenZone","_isHeaderCell","_allowToMergeRange","_getLoadPanelTargetElement","component","getView","element","_getLoadPanelContainer","parent","exportDataGrid","export","_getFullOptions","Error","NAME","selectedRowsOnly","getFullOptions"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/exporter/exceljs/export_data_grid.js)\r\n * Version: 21.2.7\r\n * Build date: Mon Apr 11 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    isDefined,\r\n    isObject\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    Export\r\n} from \"./export\";\r\nimport errors from \"../../core/errors\";\r\nvar helpers = {\r\n    _trySetAutoFilter(dataProvider, worksheet, cellRange, autoFilterEnabled) {\r\n        if (autoFilterEnabled) {\r\n            if (!isDefined(worksheet.autoFilter) && dataProvider.getRowsCount() > 0) {\r\n                var dataRange = {\r\n                    from: {\r\n                        row: cellRange.from.row + dataProvider.getHeaderRowCount() - 1,\r\n                        column: cellRange.from.column\r\n                    },\r\n                    to: cellRange.to\r\n                };\r\n                worksheet.autoFilter = dataRange\r\n            }\r\n        }\r\n    },\r\n    _trySetFont(excelCell, bold) {\r\n        if (isDefined(bold)) {\r\n            excelCell.font = excelCell.font || {};\r\n            excelCell.font.bold = bold\r\n        }\r\n    },\r\n    _getWorksheetFrozenState: (dataProvider, cellRange) => ({\r\n        state: \"frozen\",\r\n        ySplit: cellRange.from.row + dataProvider.getFrozenArea().y - 1\r\n    }),\r\n    _trySetOutlineLevel(dataProvider, row, rowIndex) {\r\n        if (rowIndex >= dataProvider.getHeaderRowCount()) {\r\n            row.outlineLevel = dataProvider.getGroupLevel(rowIndex)\r\n        }\r\n    },\r\n    _getCustomizeCellOptions(excelCell, gridCell) {\r\n        var options = {\r\n            excelCell: excelCell,\r\n            gridCell: gridCell\r\n        };\r\n        Object.defineProperty(options, \"cell\", {\r\n            get() {\r\n                errors.log(\"W0003\", \"CustomizeCell handler argument\", \"cell\", \"20.1\", \"Use the 'excelCell' field instead\");\r\n                return excelCell\r\n            }\r\n        });\r\n        return options\r\n    },\r\n    _isFrozenZone: dataProvider => dataProvider.getHeaderRowCount() > 0,\r\n    _isHeaderCell: (dataProvider, rowIndex) => rowIndex < dataProvider.getHeaderRowCount(),\r\n    _allowToMergeRange: () => true,\r\n    _getLoadPanelTargetElement: component => component.getView(\"rowsView\").element(),\r\n    _getLoadPanelContainer: component => component.getView(\"rowsView\").element().parent()\r\n};\r\n\r\nfunction exportDataGrid(options) {\r\n    return Export.export(_getFullOptions(options), helpers)\r\n}\r\n\r\nfunction _getFullOptions(options) {\r\n    if (!(isDefined(options) && isObject(options))) {\r\n        throw Error('The \"exportDataGrid\" method requires a configuration object.')\r\n    }\r\n    if (!(isDefined(options.component) && isObject(options.component) && \"dxDataGrid\" === options.component.NAME)) {\r\n        throw Error('The \"component\" field must contain a DataGrid instance.')\r\n    }\r\n    if (!isDefined(options.selectedRowsOnly)) {\r\n        options.selectedRowsOnly = false\r\n    }\r\n    if (!isDefined(options.autoFilterEnabled)) {\r\n        options.autoFilterEnabled = false\r\n    }\r\n    return Export.getFullOptions(options)\r\n}\r\nexport {\r\n    exportDataGrid\r\n};\r\n"]},"metadata":{},"sourceType":"module"}