{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.string.replace.js\";\n\n/**\r\n * DevExtreme (esm/exporter/exceljs/export_format.js)\r\n * Version: 21.2.7\r\n * Build date: Mon Apr 11 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { format as stringFormat } from \"../../core/utils/string\";\nimport numberFormatter from \"../../localization/number\";\nimport dateLocalization from \"../../localization/date\";\nimport { isDefined, isString, isObject } from \"../../core/utils/type\";\nimport { getFormat } from \"../../localization/ldml/date.format\";\nimport { getLanguageId } from \"../../localization/language_codes\";\nimport { extend } from \"../../core/utils/extend\";\nimport \"../../localization/currency\";\nvar ARABIC_ZERO_CODE = 1632;\nvar DEFINED_NUMBER_FORMTATS = {\n  thousands: \"#,##0{0},&quot;K&quot;\",\n  millions: \"#,##0{0},,&quot;M&quot;\",\n  billions: \"#,##0{0},,,&quot;B&quot;\",\n  trillions: \"#,##0{0},,,,&quot;T&quot;\",\n  percent: \"0{0}%\",\n  decimal: \"#{0}\",\n  fixedpoint: \"#,##0{0}\",\n  exponential: \"0{0}E+00\",\n  currency: \" \"\n};\nvar PERIOD_REGEXP = /a+/g;\nvar DAY_REGEXP = /E/g;\nvar DO_REGEXP = /dE+/g;\nvar STANDALONE_MONTH_REGEXP = /L/g;\nvar HOUR_REGEXP = /h/g;\nvar ANY_REGEXP = /./g;\n\nfunction _applyPrecision(format, precision) {\n  var result;\n  var i;\n\n  if (precision > 0) {\n    result = \"decimal\" !== format ? \".\" : \"\";\n\n    for (i = 0; i < precision; i++) {\n      result += \"0\";\n    }\n\n    return result;\n  }\n\n  return \"\";\n}\n\nfunction _hasArabicDigits(text) {\n  var code;\n\n  for (var i = 0; i < text.length; i++) {\n    code = text.charCodeAt(i);\n\n    if (code >= ARABIC_ZERO_CODE && code < ARABIC_ZERO_CODE + 10) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction _convertDateFormat(format) {\n  var formattedValue = (dateLocalization.format(new Date(2009, 8, 8, 6, 5, 4), format) || \"\").toString();\n  var result = getFormat(function (value) {\n    return dateLocalization.format(value, format);\n  });\n\n  if (result) {\n    result = _convertDateFormatToOpenXml(result);\n    result = _getLanguageInfo(formattedValue) + result;\n  }\n\n  return result;\n}\n\nfunction _getLanguageInfo(defaultPattern) {\n  var languageID = getLanguageId();\n  var languageIDStr = languageID ? languageID.toString(16) : \"\";\n  var languageInfo = \"\";\n\n  if (_hasArabicDigits(defaultPattern)) {\n    while (languageIDStr.length < 3) {\n      languageIDStr = \"0\" + languageIDStr;\n    }\n\n    languageInfo = \"[$-2010\" + languageIDStr + \"]\";\n  } else if (languageIDStr) {\n    languageInfo = \"[$-\" + languageIDStr + \"]\";\n  }\n\n  return languageInfo;\n}\n\nfunction _convertDateFormatToOpenXml(format) {\n  return format.split(\"/\").join(\"\\\\/\").split(\"'\").map(function (datePart, index) {\n    if (index % 2 === 0) {\n      return datePart.replace(PERIOD_REGEXP, \"AM/PM\").replace(DO_REGEXP, \"d\").replace(DAY_REGEXP, \"d\").replace(STANDALONE_MONTH_REGEXP, \"M\").replace(HOUR_REGEXP, \"H\").split(\"[\").join(\"\\\\[\").split(\"]\").join(\"\\\\]\");\n    }\n\n    if (datePart) {\n      return datePart.replace(ANY_REGEXP, \"\\\\$&\");\n    }\n\n    return \"'\";\n  }).join(\"\");\n}\n\nfunction _convertNumberFormat(format, precision, currency) {\n  var result;\n  var excelFormat;\n\n  if (\"currency\" === format) {\n    excelFormat = numberFormatter.getOpenXmlCurrencyFormat(currency);\n  } else {\n    excelFormat = DEFINED_NUMBER_FORMTATS[format.toLowerCase()];\n  }\n\n  if (excelFormat) {\n    result = stringFormat(excelFormat, _applyPrecision(format, precision));\n  }\n\n  return result;\n}\n\nexport var ExportFormat = {\n  formatObjectConverter: function formatObjectConverter(format, dataType) {\n    var result = {\n      format: format,\n      precision: format && format.precision,\n      dataType: dataType\n    };\n\n    if (isObject(format)) {\n      return extend(result, format, {\n        format: format.formatter || format.type,\n        currency: format.currency\n      });\n    }\n\n    return result;\n  },\n  convertFormat: function convertFormat(format, precision, type, currency) {\n    if (isDefined(format)) {\n      if (\"date\" === type) {\n        return _convertDateFormat(format);\n      } else if (isString(format) && DEFINED_NUMBER_FORMTATS[format.toLowerCase()]) {\n        return _convertNumberFormat(format, precision, currency);\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/Users/dexon/Projects/AI-Portal-Frontend/node_modules/devextreme/esm/exporter/exceljs/export_format.js"],"names":["format","stringFormat","numberFormatter","dateLocalization","isDefined","isString","isObject","getFormat","getLanguageId","extend","ARABIC_ZERO_CODE","DEFINED_NUMBER_FORMTATS","thousands","millions","billions","trillions","percent","decimal","fixedpoint","exponential","currency","PERIOD_REGEXP","DAY_REGEXP","DO_REGEXP","STANDALONE_MONTH_REGEXP","HOUR_REGEXP","ANY_REGEXP","_applyPrecision","precision","result","i","_hasArabicDigits","text","code","length","charCodeAt","_convertDateFormat","formattedValue","Date","toString","value","_convertDateFormatToOpenXml","_getLanguageInfo","defaultPattern","languageID","languageIDStr","languageInfo","split","join","map","datePart","index","replace","_convertNumberFormat","excelFormat","getOpenXmlCurrencyFormat","toLowerCase","ExportFormat","formatObjectConverter","dataType","formatter","type","convertFormat"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/exporter/exceljs/export_format.js)\r\n * Version: 21.2.7\r\n * Build date: Mon Apr 11 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    format as stringFormat\r\n} from \"../../core/utils/string\";\r\nimport numberFormatter from \"../../localization/number\";\r\nimport dateLocalization from \"../../localization/date\";\r\nimport {\r\n    isDefined,\r\n    isString,\r\n    isObject\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    getFormat\r\n} from \"../../localization/ldml/date.format\";\r\nimport {\r\n    getLanguageId\r\n} from \"../../localization/language_codes\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport \"../../localization/currency\";\r\nvar ARABIC_ZERO_CODE = 1632;\r\nvar DEFINED_NUMBER_FORMTATS = {\r\n    thousands: \"#,##0{0},&quot;K&quot;\",\r\n    millions: \"#,##0{0},,&quot;M&quot;\",\r\n    billions: \"#,##0{0},,,&quot;B&quot;\",\r\n    trillions: \"#,##0{0},,,,&quot;T&quot;\",\r\n    percent: \"0{0}%\",\r\n    decimal: \"#{0}\",\r\n    fixedpoint: \"#,##0{0}\",\r\n    exponential: \"0{0}E+00\",\r\n    currency: \" \"\r\n};\r\nvar PERIOD_REGEXP = /a+/g;\r\nvar DAY_REGEXP = /E/g;\r\nvar DO_REGEXP = /dE+/g;\r\nvar STANDALONE_MONTH_REGEXP = /L/g;\r\nvar HOUR_REGEXP = /h/g;\r\nvar ANY_REGEXP = /./g;\r\n\r\nfunction _applyPrecision(format, precision) {\r\n    var result;\r\n    var i;\r\n    if (precision > 0) {\r\n        result = \"decimal\" !== format ? \".\" : \"\";\r\n        for (i = 0; i < precision; i++) {\r\n            result += \"0\"\r\n        }\r\n        return result\r\n    }\r\n    return \"\"\r\n}\r\n\r\nfunction _hasArabicDigits(text) {\r\n    var code;\r\n    for (var i = 0; i < text.length; i++) {\r\n        code = text.charCodeAt(i);\r\n        if (code >= ARABIC_ZERO_CODE && code < ARABIC_ZERO_CODE + 10) {\r\n            return true\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\nfunction _convertDateFormat(format) {\r\n    var formattedValue = (dateLocalization.format(new Date(2009, 8, 8, 6, 5, 4), format) || \"\").toString();\r\n    var result = getFormat(value => dateLocalization.format(value, format));\r\n    if (result) {\r\n        result = _convertDateFormatToOpenXml(result);\r\n        result = _getLanguageInfo(formattedValue) + result\r\n    }\r\n    return result\r\n}\r\n\r\nfunction _getLanguageInfo(defaultPattern) {\r\n    var languageID = getLanguageId();\r\n    var languageIDStr = languageID ? languageID.toString(16) : \"\";\r\n    var languageInfo = \"\";\r\n    if (_hasArabicDigits(defaultPattern)) {\r\n        while (languageIDStr.length < 3) {\r\n            languageIDStr = \"0\" + languageIDStr\r\n        }\r\n        languageInfo = \"[$-2010\" + languageIDStr + \"]\"\r\n    } else if (languageIDStr) {\r\n        languageInfo = \"[$-\" + languageIDStr + \"]\"\r\n    }\r\n    return languageInfo\r\n}\r\n\r\nfunction _convertDateFormatToOpenXml(format) {\r\n    return format.split(\"/\").join(\"\\\\/\").split(\"'\").map((function(datePart, index) {\r\n        if (index % 2 === 0) {\r\n            return datePart.replace(PERIOD_REGEXP, \"AM/PM\").replace(DO_REGEXP, \"d\").replace(DAY_REGEXP, \"d\").replace(STANDALONE_MONTH_REGEXP, \"M\").replace(HOUR_REGEXP, \"H\").split(\"[\").join(\"\\\\[\").split(\"]\").join(\"\\\\]\")\r\n        }\r\n        if (datePart) {\r\n            return datePart.replace(ANY_REGEXP, \"\\\\$&\")\r\n        }\r\n        return \"'\"\r\n    })).join(\"\")\r\n}\r\n\r\nfunction _convertNumberFormat(format, precision, currency) {\r\n    var result;\r\n    var excelFormat;\r\n    if (\"currency\" === format) {\r\n        excelFormat = numberFormatter.getOpenXmlCurrencyFormat(currency)\r\n    } else {\r\n        excelFormat = DEFINED_NUMBER_FORMTATS[format.toLowerCase()]\r\n    }\r\n    if (excelFormat) {\r\n        result = stringFormat(excelFormat, _applyPrecision(format, precision))\r\n    }\r\n    return result\r\n}\r\nexport var ExportFormat = {\r\n    formatObjectConverter(format, dataType) {\r\n        var result = {\r\n            format: format,\r\n            precision: format && format.precision,\r\n            dataType: dataType\r\n        };\r\n        if (isObject(format)) {\r\n            return extend(result, format, {\r\n                format: format.formatter || format.type,\r\n                currency: format.currency\r\n            })\r\n        }\r\n        return result\r\n    },\r\n    convertFormat(format, precision, type, currency) {\r\n        if (isDefined(format)) {\r\n            if (\"date\" === type) {\r\n                return _convertDateFormat(format)\r\n            } else if (isString(format) && DEFINED_NUMBER_FORMTATS[format.toLowerCase()]) {\r\n                return _convertNumberFormat(format, precision, currency)\r\n            }\r\n        }\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}