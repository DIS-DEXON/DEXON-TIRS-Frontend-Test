{"ast":null,"code":"import _classCallCheck from \"/Users/dexon/Projects/AI-Portal-Frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/dexon/Projects/AI-Portal-Frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\n\n/**\r\n * DevExtreme (esm/exporter/exceljs/export_merged_ranges_manager.js)\r\n * Version: 21.2.7\r\n * Build date: Mon Apr 11 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar MergedRangesManager = /*#__PURE__*/function () {\n  function MergedRangesManager(dataProvider, helpers, mergeRowFieldValues, mergeColumnFieldValues) {\n    _classCallCheck(this, MergedRangesManager);\n\n    this.mergedCells = [];\n    this.mergedRanges = [];\n    this.dataProvider = dataProvider;\n    this.helpers = helpers;\n    this.mergeRowFieldValues = mergeRowFieldValues;\n    this.mergeColumnFieldValues = mergeColumnFieldValues;\n  }\n\n  _createClass(MergedRangesManager, [{\n    key: \"updateMergedRanges\",\n    value: function updateMergedRanges(excelCell, rowIndex, cellIndex) {\n      if (this.helpers._isHeaderCell(this.dataProvider, rowIndex, cellIndex)) {\n        if (!this.isCellInMergedRanges(rowIndex, cellIndex)) {\n          var _this$dataProvider$ge = this.dataProvider.getCellMerging(rowIndex, cellIndex),\n              rowspan = _this$dataProvider$ge.rowspan,\n              colspan = _this$dataProvider$ge.colspan;\n\n          var isMasterCellOfMergedRange = colspan || rowspan;\n\n          if (isMasterCellOfMergedRange) {\n            var allowToMergeRange = this.helpers._allowToMergeRange(this.dataProvider, rowIndex, cellIndex, rowspan, colspan, this.mergeRowFieldValues, this.mergeColumnFieldValues);\n\n            this.updateMergedCells(excelCell, rowIndex, cellIndex, rowspan, colspan, allowToMergeRange);\n\n            if (allowToMergeRange) {\n              this.mergedRanges.push(_extends({\n                masterCell: excelCell\n              }, {\n                rowspan: rowspan,\n                colspan: colspan\n              }));\n            }\n          }\n        }\n      }\n    }\n  }, {\n    key: \"isCellInMergedRanges\",\n    value: function isCellInMergedRanges(rowIndex, cellIndex) {\n      return this.mergedCells[rowIndex] && this.mergedCells[rowIndex][cellIndex];\n    }\n  }, {\n    key: \"findMergedCellInfo\",\n    value: function findMergedCellInfo(rowIndex, cellIndex) {\n      if (this.helpers._isHeaderCell(this.dataProvider, rowIndex, cellIndex)) {\n        if (this.isCellInMergedRanges(rowIndex, cellIndex)) {\n          return this.mergedCells[rowIndex][cellIndex];\n        }\n      }\n    }\n  }, {\n    key: \"updateMergedCells\",\n    value: function updateMergedCells(excelCell, rowIndex, cellIndex, rowspan, colspan, allowToMergeRange) {\n      for (var i = rowIndex; i <= rowIndex + rowspan; i++) {\n        for (var j = cellIndex; j <= cellIndex + colspan; j++) {\n          if (!this.mergedCells[i]) {\n            this.mergedCells[i] = [];\n          }\n\n          this.mergedCells[i][j] = {\n            masterCell: excelCell,\n            unmerged: !allowToMergeRange\n          };\n        }\n      }\n    }\n  }, {\n    key: \"applyMergedRages\",\n    value: function applyMergedRages(worksheet) {\n      this.mergedRanges.forEach(function (range) {\n        var startRowIndex = range.masterCell.fullAddress.row;\n        var startColumnIndex = range.masterCell.fullAddress.col;\n        var endRowIndex = startRowIndex + range.rowspan;\n        var endColumnIndex = startColumnIndex + range.colspan;\n        worksheet.mergeCells(startRowIndex, startColumnIndex, endRowIndex, endColumnIndex);\n      });\n    }\n  }]);\n\n  return MergedRangesManager;\n}();\n\nexport { MergedRangesManager };","map":{"version":3,"sources":["/Users/dexon/Projects/AI-Portal-Frontend/node_modules/devextreme/esm/exporter/exceljs/export_merged_ranges_manager.js"],"names":["_extends","MergedRangesManager","dataProvider","helpers","mergeRowFieldValues","mergeColumnFieldValues","mergedCells","mergedRanges","excelCell","rowIndex","cellIndex","_isHeaderCell","isCellInMergedRanges","getCellMerging","rowspan","colspan","isMasterCellOfMergedRange","allowToMergeRange","_allowToMergeRange","updateMergedCells","push","masterCell","i","j","unmerged","worksheet","forEach","range","startRowIndex","fullAddress","row","startColumnIndex","col","endRowIndex","endColumnIndex","mergeCells"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/exporter/exceljs/export_merged_ranges_manager.js)\r\n * Version: 21.2.7\r\n * Build date: Mon Apr 11 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nclass MergedRangesManager {\r\n    constructor(dataProvider, helpers, mergeRowFieldValues, mergeColumnFieldValues) {\r\n        this.mergedCells = [];\r\n        this.mergedRanges = [];\r\n        this.dataProvider = dataProvider;\r\n        this.helpers = helpers;\r\n        this.mergeRowFieldValues = mergeRowFieldValues;\r\n        this.mergeColumnFieldValues = mergeColumnFieldValues\r\n    }\r\n    updateMergedRanges(excelCell, rowIndex, cellIndex) {\r\n        if (this.helpers._isHeaderCell(this.dataProvider, rowIndex, cellIndex)) {\r\n            if (!this.isCellInMergedRanges(rowIndex, cellIndex)) {\r\n                var {\r\n                    rowspan: rowspan,\r\n                    colspan: colspan\r\n                } = this.dataProvider.getCellMerging(rowIndex, cellIndex);\r\n                var isMasterCellOfMergedRange = colspan || rowspan;\r\n                if (isMasterCellOfMergedRange) {\r\n                    var allowToMergeRange = this.helpers._allowToMergeRange(this.dataProvider, rowIndex, cellIndex, rowspan, colspan, this.mergeRowFieldValues, this.mergeColumnFieldValues);\r\n                    this.updateMergedCells(excelCell, rowIndex, cellIndex, rowspan, colspan, allowToMergeRange);\r\n                    if (allowToMergeRange) {\r\n                        this.mergedRanges.push(_extends({\r\n                            masterCell: excelCell\r\n                        }, {\r\n                            rowspan: rowspan,\r\n                            colspan: colspan\r\n                        }))\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    isCellInMergedRanges(rowIndex, cellIndex) {\r\n        return this.mergedCells[rowIndex] && this.mergedCells[rowIndex][cellIndex]\r\n    }\r\n    findMergedCellInfo(rowIndex, cellIndex) {\r\n        if (this.helpers._isHeaderCell(this.dataProvider, rowIndex, cellIndex)) {\r\n            if (this.isCellInMergedRanges(rowIndex, cellIndex)) {\r\n                return this.mergedCells[rowIndex][cellIndex]\r\n            }\r\n        }\r\n    }\r\n    updateMergedCells(excelCell, rowIndex, cellIndex, rowspan, colspan, allowToMergeRange) {\r\n        for (var i = rowIndex; i <= rowIndex + rowspan; i++) {\r\n            for (var j = cellIndex; j <= cellIndex + colspan; j++) {\r\n                if (!this.mergedCells[i]) {\r\n                    this.mergedCells[i] = []\r\n                }\r\n                this.mergedCells[i][j] = {\r\n                    masterCell: excelCell,\r\n                    unmerged: !allowToMergeRange\r\n                }\r\n            }\r\n        }\r\n    }\r\n    applyMergedRages(worksheet) {\r\n        this.mergedRanges.forEach(range => {\r\n            var startRowIndex = range.masterCell.fullAddress.row;\r\n            var startColumnIndex = range.masterCell.fullAddress.col;\r\n            var endRowIndex = startRowIndex + range.rowspan;\r\n            var endColumnIndex = startColumnIndex + range.colspan;\r\n            worksheet.mergeCells(startRowIndex, startColumnIndex, endRowIndex, endColumnIndex)\r\n        })\r\n    }\r\n}\r\nexport {\r\n    MergedRangesManager\r\n};\r\n"]},"metadata":{},"sourceType":"module"}